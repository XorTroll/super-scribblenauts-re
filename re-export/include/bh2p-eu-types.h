/* Super Scribblenauts (EU) type definitions */
/* Generated by https://github.com/XorTroll/super-scribblenauts-re at February 15, 2025 02:18:45 PM */

#ifndef BH2P_RE_TYPES_GEN_H
#define BH2P_RE_TYPES_GEN_H

/* Basic IDA types and definitions */

#define int16_t short
#define int32_t int
#define int64_t long long
#define uint8_t unsigned char
#define uint16_t unsigned short
#define uint32_t unsigned int
#define uint64_t unsigned long long
#define u8 uint8_t
#define u16 uint16_t
#define u32 uint32_t
#define u64 uint64_t
#define i16 int16_t
#define i32 int32_t
#define fx16 i16
#define fx32 i32
#define _BYTE uint8_t
#define _WORD int16_t
#define _DWORD int32_t
#define _QWORD int64_t
#define BOOL int
#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long
#define __cdecl
#define __fastcall
#define __usercall

#define __noreturn __attribute__((noreturn))

#define __thumb __attribute__((target("thumb")))

_Static_assert(sizeof(u8) == 1, "u8 definition");
_Static_assert(sizeof(u16) == 2, "u16 definition");
_Static_assert(sizeof(u32) == 4, "u32 definition");
_Static_assert(sizeof(u64) == 8, "u64 definition");

/* Enums (11 total) */

enum Language {
    Language_EN = 0,
    Language_NL = 1,
    Language_FR = 2,
    Language_GE = 3,
    Language_IT = 4,
    Language_ES = 5,
};

enum Key {
    Key_None = 0,
    Key_A = 1,
    Key_B = 2,
    Key_Select = 4,
    Key_Start = 8,
    Key_Left = 16,
    Key_Up = 32,
    Key_Right = 64,
    Key_Down = 128,
    Key_R = 256,
    Key_L = 512,
    Key_X = 1024,
    Key_Y = 2048,
    Key_Touch = 4096,
    Key_Lid = 8192,
};

enum StructOF_MaskA {
    StructOF_MaskA_None = 0,
    StructOF_MaskA_Unk3 = 8,
    StructOF_MaskA_Unk4 = 16,
};

enum StructOF_MaskB {
    StructOF_MaskB_None = 0,
    StructOF_MaskB_Unk3 = 8,
    StructOF_MaskB_Unk4 = 16,
    StructOF_MaskB_Unk6 = 64,
    StructOF_MaskB_Unk7 = 128,
};

enum StructOI_MaskD {
    StructOI_MaskD_None = 0,
    StructOI_MaskD_Unk0 = 1,
    StructOI_MaskD_JumpedOrLanded = 4,
};

enum StructOI_MaskQ {
    StructOI_MaskQ_None = 0,
    StructOI_MaskQ_Default = 1,
    StructOI_MaskQ_Flying = 8,
    StructOI_MaskQ_FreeFall = 256,
};

enum StructOI_MaskX {
    StructOI_MaskX_None = 0,
    StructOI_MaskX_InGround = 1,
    StructOI_MaskX_InAir = 2,
};

enum StructOI_MaskY {
    StructOI_MaskY_None = 0,
    StructOI_MaskY_InputHeld = 65536,
};

enum StructOA_MaskX {
    StructOA_MaskX_None = 0,
    StructOA_MaskX_Unk1 = 2,
    StructOA_MaskX_Unk2 = 4,
    StructOA_MaskX_Unk3 = 8,
    StructOA_MaskX_Unk4 = 16,
};

enum StructOC_MaskA {
    StructOC_MaskA_None = 0,
    StructOC_MaskA_Unk31 = 2147483648,
};

enum StructOOO_MaskA {
    StructOOO_MaskA_None = 0,
    StructOOO_MaskA_Unk8 = 256,
};

/* Structs (121 total) */

typedef struct Mem_ExpHeapHead Mem_ExpHeapHead;

typedef struct Mem_ExpHeapMemoryBlockList Mem_ExpHeapMemoryBlockList;

typedef struct StructA StructA;

typedef struct StructB StructB;

typedef struct Struct0 Struct0;

typedef struct StructD StructD;

typedef struct StructC StructC;

typedef struct Bios_CardHeader Bios_CardHeader;

typedef struct Bios_CardHeaderStart Bios_CardHeaderStart;

typedef struct Fs_OverlayInfo Fs_OverlayInfo;

typedef struct StructDSub StructDSub;

typedef struct Fs_File Fs_File;

typedef struct Fs_FileList Fs_FileList;

typedef struct Os_ThreadQueue Os_ThreadQueue;

typedef struct Fs_File_Entry Fs_File_Entry;

typedef struct Fs_File_OperationArg Fs_File_OperationArg;

typedef struct Os_Mutex Os_Mutex;

typedef struct Os_MutexQueue Os_MutexQueue;

typedef struct Os_Alarm Os_Alarm;

typedef struct Os_AlarmQueue Os_AlarmQueue;

typedef struct Os_Thread Os_Thread;

typedef struct Fs_Archive Fs_Archive;

typedef struct Mem_HeapHead_Frame Mem_HeapHead_Frame;

typedef struct NNSFndList NNSFndList;

typedef struct Mem_FrameHeapState Mem_FrameHeapState;

typedef struct Mem_ExpHeapMemoryBlockHead Mem_ExpHeapMemoryBlockHead;

typedef struct CommonHeader CommonHeader;

typedef struct Mem_HeapHead Mem_HeapHead;

typedef struct Mem_MemoryRegion3 Mem_MemoryRegion3;

typedef union Mem_CommonHeapHead Mem_CommonHeapHead;

typedef struct Mem_FrameHeapHead Mem_FrameHeapHead;

typedef struct StructE StructE;

typedef struct StructH StructH;

typedef struct StructF StructF;

typedef struct Os_PersonalData Os_PersonalData;

typedef struct StructI StructI;

typedef struct FileBuffer FileBuffer;

typedef struct basic_string basic_string;

typedef struct StructJ StructJ;

typedef struct StringHolder StringHolder;

typedef struct StructK StructK;

typedef struct StructL StructL;

typedef struct StructLSub StructLSub;

typedef struct StructM StructM;

typedef struct StructN StructN;

typedef struct StructP StructP;

typedef struct StructG StructG;

typedef struct StructISub StructISub;

typedef struct StructGUI StructGUI;

typedef struct StructQ StructQ;

typedef struct StructQSub StructQSub;

typedef struct StructPSub StructPSub;

typedef struct StructFSub StructFSub;

typedef struct StructR StructR;

typedef struct StructS StructS;

typedef struct StructSSub StructSSub;

typedef struct StructT StructT;

typedef struct StructU StructU;

typedef struct AdjectiveHolder AdjectiveHolder;

typedef struct Adjective Adjective;

typedef struct StructOSubSubSub StructOSubSubSub;

typedef struct StructV1 StructV1;

typedef struct StructV2 StructV2;

typedef struct StructOSubSubSubList16 StructOSubSubSubList16;

typedef struct StructV StructV;

typedef struct PaletteBlock PaletteBlock;

typedef struct Object Object;

typedef struct StructW StructW;

typedef struct StructX StructX;

typedef struct StructOA StructOA;

typedef struct StructOB StructOB;

typedef struct StructOC StructOC;

typedef struct StructOD StructOD;

typedef struct StructOE StructOE;

typedef struct StructOF StructOF;

typedef struct StructOG StructOG;

typedef struct StructOH StructOH;

typedef struct StructOI StructOI;

typedef struct StructOJ StructOJ;

typedef struct vector_Object vector_Object;

typedef struct StructY StructY;

typedef struct StructBB StructBB;

typedef struct StructCC StructCC;

typedef struct StructDX StructDX;

typedef struct StructIBase StructIBase;

typedef struct StructDD StructDD;

typedef struct StructDD1 StructDD1;

typedef struct StructZ StructZ;

typedef struct StructAA StructAA;

typedef struct StructDD2 StructDD2;

typedef struct StructEE StructEE;

typedef struct StructESub StructESub;

typedef struct StructESub1 StructESub1;

typedef struct vector_unk vector_unk;

typedef struct vector_unk2 vector_unk2;

typedef struct StructOOO StructOOO;

typedef struct vector_unk3 vector_unk3;

typedef struct StructOOO2 StructOOO2;

typedef struct vector_StructJ5 vector_StructJ5;

typedef struct StructJBase StructJBase;

typedef struct StructJBaseBase StructJBaseBase;

typedef struct StructJBaseBaseBase StructJBaseBaseBase;

typedef struct StructJ3 StructJ3;

typedef struct StructJ5 StructJ5;

typedef struct StructOU StructOU;

typedef struct vector_unk4 vector_unk4;

typedef struct StructJSub StructJSub;

typedef struct StructJ2 StructJ2;

typedef struct StructOOP StructOOP;

typedef struct Vec2 Vec2;

typedef struct StructDJ StructDJ;

typedef struct StructDJSub StructDJSub;

typedef struct StructOIP StructOIP;

typedef struct StructBB2 StructBB2;

typedef struct StructZX StructZX;

typedef struct StructBB3 StructBB3;

typedef struct StructAN StructAN;

typedef struct StructBB1 StructBB1;

typedef struct StructBBB StructBBB;

typedef struct StructA0 StructA0;

typedef struct StructBBX StructBBX;

/* size 0x8 */
struct Mem_ExpHeapMemoryBlockList {
    /* off 0x0 size 0x4 */
    Mem_ExpHeapMemoryBlockHead *list_head;

    /* off 0x4 size 0x4 */
    Mem_ExpHeapMemoryBlockHead *list_tail;

} __attribute__((packed));
_Static_assert(sizeof(Mem_ExpHeapMemoryBlockList) == 0x8, "Mem_ExpHeapMemoryBlockList definition");

/* size 0x8 */
struct StructA {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x4 */
    StructB *strb;

} __attribute__((packed));
_Static_assert(sizeof(StructA) == 0x8, "StructA definition");

/* size 0x30 */
struct StructB {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x4 */
    u32 b2;

    /* off 0x8 size 0x4 */
    u32 free_rem_heap_size;

    /* off 0xC size 0x4 */
    u32 b4;

    /* off 0x10 size 0x4 */
    u32 b5;

    /* off 0x14 size 0x4 */
    u32 b6;

    /* off 0x18 size 0x4 */
    u32 b7;

    /* off 0x1C size 0x4 */
    u32 b8;

    /* off 0x20 size 0x4 */
    u32 b9;

    /* off 0x24 size 0x4 */
    void *rem_heap_buf;

    /* off 0x28 size 0x1 */
    u8 alloc_type;

    /* off 0x29 size 0x1 */
    u8 unk_is_free_available_or_need;

    /* off 0x2A size 0x1 */
    u8 b113;

    /* off 0x2B size 0x1 */
    u8 b114;

    /* off 0x2C size 0x4 */
    Mem_HeapHead *rem_heap;

} __attribute__((packed));
_Static_assert(sizeof(StructB) == 0x30, "StructB definition");

/* size 0x34 */
struct Struct0 {
    /* off 0x0 size 0x4 */
    StructG *g_g2;

    /* off 0x4 size 0x4 */
    u32 g_64;

    /* off 0x8 size 0x4 */
    StructA *g_a;

    /* off 0xC size 0x4 */
    StructA *g_a2;

    /* off 0x10 size 0x4 */
    u32 g_70;

    /* off 0x14 size 0x4 */
    StructD *g_d;

    /* off 0x18 size 0x4 */
    StructE *g_e;

    /* off 0x1C size 0x4 */
    StructE *g_e2;

    /* off 0x20 size 0x4 */
    u32 g_80;

    /* off 0x24 size 0x4 */
    StructC *g_c;

    /* off 0x28 size 0x4 */
    StructG *g_g;

    /* off 0x2C size 0x4 */
    u32 g_8C;

    /* off 0x30 size 0x4 */
    u32 g_90;

} __attribute__((packed));
_Static_assert(sizeof(Struct0) == 0x34, "Struct0 definition");

/* size 0x38 */
struct StructD {
    /* off 0x0 size 0x4 */
    void **vtable_D;

    /* off 0x4 size 0x2 */
    u16 cur_loaded_ovl_id;

    /* off 0x6 size 0x2 */
    u16 cur_ovl_id_2;

    /* off 0x8 size 0x4 */
    u32 _d3;

    /* off 0xC size 0x4 */
    StructDSub *dsub_2;

    /* off 0x10 size 0x2 */
    u16 d51;

    /* off 0x12 size 0x1 */
    u8 d521;

    /* off 0x13 size 0x1 */
    u8 d522;

    /* off 0x14 size 0x4 */
    u32 _d6;

    /* off 0x18 size 0x4 */
    void **vtable_E;

    /* off 0x1C size 0x4 */
    StructDX *dx;

    /* off 0x20 size 0x4 */
    StructD *self_ref;

    /* off 0x24 size 0x1 */
    u8 d101;

    /* off 0x25 size 0x1 */
    u8 d102;

    /* off 0x26 size 0x1 */
    u8 d103;

    /* off 0x27 size 0x1 */
    u8 d104;

    /* off 0x28 size 0x4 */
    StructDSub *dsub;

    /* off 0x2C size 0x4 */
    u32 _d12;

    /* off 0x30 size 0x1 */
    u8 d131;

    /* off 0x31 size 0x1 */
    u8 d132;

    /* off 0x32 size 0x1 */
    u8 d133;

    /* off 0x33 size 0x1 */
    u8 top_bright_val;

    /* off 0x34 size 0x1 */
    u8 bottom_bright_val;

    /* off 0x35 size 0x1 */
    u8 maybe_top_bright_state;

    /* off 0x36 size 0x1 */
    u8 maybe_bottom_bright_state;

    /* off 0x37 size 0x1 */
    u8 d144;

} __attribute__((packed));
_Static_assert(sizeof(StructD) == 0x38, "StructD definition");

/* size 0x60 */
struct Bios_CardHeaderStart {
    /* off 0x0 size 0xC */
    char gameTitle[12];

    /* off 0xC size 0x4 */
    char gameCode[4];

    /* off 0x10 size 0x2 */
    char makercode[2];

    /* off 0x12 size 0x1 */
    u8 unitCode;

    /* off 0x13 size 0x1 */
    u8 deviceType;

    /* off 0x14 size 0x1 */
    u8 deviceSize;

    /* off 0x15 size 0x9 */
    u8 reserved1[9];

    /* off 0x1E size 0x1 */
    u8 romversion;

    /* off 0x1F size 0x1 */
    u8 flags;

    /* off 0x20 size 0x4 */
    u32 arm9romOffset;

    /* off 0x24 size 0x4 */
    void *arm9executeAddress;

    /* off 0x28 size 0x4 */
    void *arm9destination;

    /* off 0x2C size 0x4 */
    u32 arm9binarySize;

    /* off 0x30 size 0x4 */
    u32 arm7romOffset;

    /* off 0x34 size 0x4 */
    void *arm7executeAddress;

    /* off 0x38 size 0x4 */
    void *arm7destination;

    /* off 0x3C size 0x4 */
    u32 arm7binarySize;

    /* off 0x40 size 0x4 */
    u32 fntOffset;

    /* off 0x44 size 0x4 */
    u32 fntSize;

    /* off 0x48 size 0x4 */
    u32 fatOffset;

    /* off 0x4C size 0x4 */
    u32 fatSize;

    /* off 0x50 size 0x4 */
    u32 arm9overlaySource;

    /* off 0x54 size 0x4 */
    u32 arm9overlaySize;

    /* off 0x58 size 0x4 */
    u32 arm7overlaySource;

    /* off 0x5C size 0x4 */
    u32 arm7overlaySize;

} __attribute__((packed));
_Static_assert(sizeof(Bios_CardHeaderStart) == 0x60, "Bios_CardHeaderStart definition");

/* size 0x2C */
struct Fs_OverlayInfo {
    /* off 0x0 size 0x4 */
    u32 id;

    /* off 0x4 size 0x4 */
    void *ram_addr;

    /* off 0x8 size 0x4 */
    u32 ram_size;

    /* off 0xC size 0x4 */
    u32 bss_size;

    /* off 0x10 size 0x4 */
    void (**init_fns_start)(void);

    /* off 0x14 size 0x4 */
    void (**init_fns_end)(void);

    /* off 0x18 size 0x4 */
    u32 fat_file_id;

    /* off 0x1C size 0x4 */
    u32 compressed_size_and_flag;

    /* off 0x20 size 0x4 */
    u32 processor;

    /* off 0x24 size 0x4 */
    u32 file_start_offset;

    /* off 0x28 size 0x4 */
    u32 file_size;

} __attribute__((packed));
_Static_assert(sizeof(Fs_OverlayInfo) == 0x2C, "Fs_OverlayInfo definition");

/* size 0x40 */
struct StructDSub {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x2 */
    u16 ovl_id;

    /* off 0x6 size 0x2 */
    u16 ovl_id_2;

    /* off 0x8 size 0x1 */
    u8 db11;

    /* off 0x9 size 0x1 */
    u8 db12;

    /* off 0xA size 0x2 */
    u16 db2;

    /* off 0xC size 0x4 */
    StructDSub *sub_2;

    /* off 0x10 size 0x4 */
    u32 _d4;

    /* off 0x14 size 0x4 */
    u32 _d5;

    /* off 0x18 size 0x1 */
    u8 d61;

    /* off 0x19 size 0x1 */
    u8 brightness_val;

    /* off 0x1A size 0x1 */
    u8 d63;

    /* off 0x1B size 0x1 */
    u8 d64;

    /* off 0x1C size 0x4 */
    u32 _d7;

    /* off 0x20 size 0x4 */
    u32 _d8;

    /* off 0x24 size 0x4 */
    u32 _d9;

    /* off 0x28 size 0x4 */
    u32 _d10;

    /* off 0x2C size 0x4 */
    u32 _d11;

    /* off 0x30 size 0x4 */
    u32 _d12;

    /* off 0x34 size 0x4 */
    u32 _d13;

    /* off 0x38 size 0x4 */
    u32 _d14;

    /* off 0x3C size 0x4 */
    u32 _d15;

} __attribute__((packed));
_Static_assert(sizeof(StructDSub) == 0x40, "StructDSub definition");

/* size 0x8 */
struct Fs_FileList {
    /* off 0x0 size 0x4 */
    Fs_File *prev;

    /* off 0x4 size 0x4 */
    Fs_File *next;

} __attribute__((packed));
_Static_assert(sizeof(Fs_FileList) == 0x8, "Fs_FileList definition");

/* size 0x8 */
struct Os_ThreadQueue {
    /* off 0x0 size 0x4 */
    Os_Thread *prev_thr;

    /* off 0x4 size 0x4 */
    Os_Thread *next_thr;

} __attribute__((packed));
_Static_assert(sizeof(Os_ThreadQueue) == 0x8, "Os_ThreadQueue definition");

/* size 0x10 */
struct Fs_File_Entry {
    /* off 0x0 size 0x10 */
    u32 es[4];

} __attribute__((packed));
_Static_assert(sizeof(Fs_File_Entry) == 0x10, "Fs_File_Entry definition");

/* size 0x18 */
struct Fs_File_OperationArg {
    /* off 0x0 size 0x18 */
    u32 arg[6];

} __attribute__((packed));
_Static_assert(sizeof(Fs_File_OperationArg) == 0x18, "Fs_File_OperationArg definition");

/* size 0x8 */
struct Os_MutexQueue {
    /* off 0x0 size 0x4 */
    Os_Mutex *prev_mutex;

    /* off 0x4 size 0x4 */
    Os_Mutex *next_mutex;

} __attribute__((packed));
_Static_assert(sizeof(Os_MutexQueue) == 0x8, "Os_MutexQueue definition");

/* size 0x8 */
struct Os_AlarmQueue {
    /* off 0x0 size 0x4 */
    Os_Alarm *prev_alarm;

    /* off 0x4 size 0x4 */
    Os_Alarm *next_alarm;

} __attribute__((packed));
_Static_assert(sizeof(Os_AlarmQueue) == 0x8, "Os_AlarmQueue definition");

/* size 0x0 */
struct Os_Thread {
} __attribute__((packed));
_Static_assert(sizeof(Os_Thread) == 0x0, "Os_Thread definition");

/* size 0x5C */
struct Fs_Archive {
    /* off 0x0 size 0x4 */
    u32 name_packed;

    /* off 0x4 size 0x4 */
    Fs_Archive *next_arc;

    /* off 0x8 size 0x4 */
    Fs_Archive *prev_arc;

    /* off 0xC size 0x8 */
    Os_ThreadQueue sync_queue;

    /* off 0x14 size 0x8 */
    Os_ThreadQueue status_queue;

    /* off 0x1C size 0x4 */
    u32 flags;

    /* off 0x20 size 0x8 */
    Fs_FileList file_list;

    /* off 0x28 size 0x4 */
    void *fimg_data_start;

    /* off 0x2C size 0x4 */
    void *fat_start_ptr_rel;

    /* off 0x30 size 0x4 */
    u32 fat_size;

    /* off 0x34 size 0x4 */
    void *fnt_start_ptr_rel;

    /* off 0x38 size 0x4 */
    u32 fnt_size;

    /* off 0x3C size 0x4 */
    void *fat_start_ptr_rel_bak;

    /* off 0x40 size 0x4 */
    void *fnt_start_ptr_rel_bak;

    /* off 0x44 size 0x4 */
    void *used_read_buf;

    /* off 0x48 size 0x4 */
    int (__fastcall *read_fn)(Fs_Archive *, void *, void *, int);

    /* off 0x4C size 0x4 */
    int (__fastcall *write_fn)(Fs_Archive *, void *, void *, int);

    /* off 0x50 size 0x4 */
    int (__fastcall *fat_fnt_fn)(Fs_Archive *, void *, void *, int);

    /* off 0x54 size 0x4 */
    int (__fastcall *custom_op_handler)(Fs_File *, int);

    /* off 0x58 size 0x4 */
    u32 custom_op_mask;

} __attribute__((packed));
_Static_assert(sizeof(Fs_Archive) == 0x5C, "Fs_Archive definition");

/* size 0xC */
struct NNSFndList {
    /* off 0x0 size 0x4 */
    void *item_list_head;

    /* off 0x4 size 0x4 */
    void *item_list_tail;

    /* off 0x8 size 0x2 */
    _WORD item_count;

    /* off 0xA size 0x2 */
    _WORD item_head_tail_offset;

} __attribute__((packed));
_Static_assert(sizeof(NNSFndList) == 0xC, "NNSFndList definition");

/* size 0x10 */
struct Mem_ExpHeapMemoryBlockHead {
    /* off 0x0 size 0x2 */
    _WORD magic;

    /* off 0x2 size 0x2 */
    _WORD attrs;

    /* off 0x4 size 0x4 */
    u32 block_size;

    /* off 0x8 size 0x4 */
    Mem_ExpHeapMemoryBlockHead *prev_block;

    /* off 0xC size 0x4 */
    Mem_ExpHeapMemoryBlockHead *next_block;

} __attribute__((packed));
_Static_assert(sizeof(Mem_ExpHeapMemoryBlockHead) == 0x10, "Mem_ExpHeapMemoryBlockHead definition");

/* size 0x10 */
struct CommonHeader {
    /* off 0x0 size 0x4 */
    u32 magic;

    /* off 0x4 size 0x2 */
    u16 byte_order;

    /* off 0x6 size 0x2 */
    u16 version;

    /* off 0x8 size 0x4 */
    u32 total_size;

    /* off 0xC size 0x2 */
    u16 header_size;

    /* off 0xE size 0x2 */
    u16 block_count;

} __attribute__((packed));
_Static_assert(sizeof(CommonHeader) == 0x10, "CommonHeader definition");

/* size 0x8 */
struct Mem_MemoryRegion3 {
    /* off 0x0 size 0x4 */
    void *start;

    /* off 0x4 size 0x4 */
    void *end;

} __attribute__((packed));
_Static_assert(sizeof(Mem_MemoryRegion3) == 0x8, "Mem_MemoryRegion3 definition");

/* size 0xC */
struct Mem_FrameHeapHead {
    /* off 0x0 size 0x8 */
    Mem_MemoryRegion3 cur_heap_region;

    /* off 0x8 size 0x4 */
    Mem_FrameHeapState *cur_state;

} __attribute__((packed));
_Static_assert(sizeof(Mem_FrameHeapHead) == 0xC, "Mem_FrameHeapHead definition");

/* size 0x54 */
struct StructH {
    /* off 0x0 size 0x4 */
    u32 vtable;

    /* off 0x4 size 0x1 */
    u8 system_lang;

    /* off 0x5 size 0x1 */
    u8 h2a2;

    /* off 0x6 size 0x2 */
    u16 h2b;

    /* off 0x8 size 0x4 */
    u32 file_895_offset;

    /* off 0xC size 0x4 */
    u32 file_896_offset;

    /* off 0x10 size 0x4 */
    u32 file_897_offset;

    /* off 0x14 size 0x4 */
    u32 h6;

    /* off 0x18 size 0x4 */
    u32 h7;

    /* off 0x1C size 0x4 */
    u32 file_893_offset;

    /* off 0x20 size 0x4 */
    u32 file_894_offset;

    /* off 0x24 size 0x4 */
    u32 h10;

    /* off 0x28 size 0x4 */
    u32 h11;

    /* off 0x2C size 0x4 */
    u32 file_891_offset;

    /* off 0x30 size 0x4 */
    u32 file_892_offset;

    /* off 0x34 size 0x4 */
    u32 h14;

    /* off 0x38 size 0x4 */
    u32 h15;

    /* off 0x3C size 0x4 */
    u32 h16;

    /* off 0x40 size 0x4 */
    u32 h17;

    /* off 0x44 size 0x1 */
    u8 h181;

    /* off 0x45 size 0x1 */
    u8 h182;

    /* off 0x46 size 0x1 */
    u8 h183;

    /* off 0x47 size 0x1 */
    u8 h184;

    /* off 0x48 size 0x4 */
    u32 h19;

    /* off 0x4C size 0x4 */
    u32 h20;

    /* off 0x50 size 0x4 */
    u32 h21;

} __attribute__((packed));
_Static_assert(sizeof(StructH) == 0x54, "StructH definition");

/* size 0x50 */
struct Os_PersonalData {
    /* off 0x0 size 0x1 */
    _BYTE lang;

    /* off 0x1 size 0x1 */
    _BYTE theme;

    /* off 0x2 size 0x1 */
    _BYTE birthday_month;

    /* off 0x3 size 0x1 */
    _BYTE birthday_day;

    /* off 0x4 size 0x14 */
    _WORD name[10];

    /* off 0x18 size 0x2 */
    _WORD name_len;

    /* off 0x1A size 0x34 */
    _WORD msg[26];

    /* off 0x4E size 0x2 */
    _WORD msg_len;

} __attribute__((packed));
_Static_assert(sizeof(Os_PersonalData) == 0x50, "Os_PersonalData definition");

/* size 0x8 */
struct FileBuffer {
    /* off 0x0 size 0x4 */
    u32 size;

    /* off 0x4 size 0x4 */
    void *buf;

} __attribute__((packed));
_Static_assert(sizeof(FileBuffer) == 0x8, "FileBuffer definition");

/* size 0xC */
struct basic_string {
    /* off 0x0 size 0x4 */
    u32 _s1;

    /* off 0x4 size 0x4 */
    u32 len;

    /* off 0x8 size 0x4 */
    char *ptr;

} __attribute__((packed));
_Static_assert(sizeof(basic_string) == 0xC, "basic_string definition");

/* size 0x5C */
struct StructJ {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x4 */
    u32 j1;

    /* off 0x8 size 0x4 */
    u32 j2;

    /* off 0xC size 0x1 */
    u8 j31;

    /* off 0xD size 0x1 */
    u8 j32;

    /* off 0xE size 0x2 */
    u16 j33;

    /* off 0x10 size 0x4 */
    u32 j4;

    /* off 0x14 size 0x4 */
    u32 j5;

    /* off 0x18 size 0x4 */
    u32 j6;

    /* off 0x1C size 0x4 */
    u32 j7;

    /* off 0x20 size 0x4 */
    u32 j8;

    /* off 0x24 size 0x4 */
    u32 j9;

    /* off 0x28 size 0x4 */
    u32 j10;

    /* off 0x2C size 0x2 */
    u16 j111;

    /* off 0x2E size 0x1 */
    u8 j112;

    /* off 0x2F size 0x1 */
    u8 j113;

    /* off 0x30 size 0x4 */
    u32 j12;

    /* off 0x34 size 0x4 */
    u32 j13;

    /* off 0x38 size 0x4 */
    u32 j14;

    /* off 0x3C size 0x4 */
    u32 j15;

    /* off 0x40 size 0x1 */
    u8 j161;

    /* off 0x41 size 0x1 */
    u8 j162;

    /* off 0x42 size 0x1 */
    u8 j163;

    /* off 0x43 size 0x1 */
    u8 j164;

    /* off 0x44 size 0x1 */
    u8 j171;

    /* off 0x45 size 0x1 */
    u8 j172;

    /* off 0x46 size 0x1 */
    u8 j173;

    /* off 0x47 size 0x1 */
    u8 j174;

    /* off 0x48 size 0x2 */
    u16 j181;

    /* off 0x4A size 0x2 */
    u16 j182;

    /* off 0x4C size 0x4 */
    u32 ncer_entry_id;

    /* off 0x50 size 0x1 */
    u8 j201;

    /* off 0x51 size 0x1 */
    u8 j202;

    /* off 0x52 size 0x2 */
    u16 j203;

    /* off 0x54 size 0x4 */
    u32 j21;

    /* off 0x58 size 0x4 */
    u32 j22;

} __attribute__((packed));
_Static_assert(sizeof(StructJ) == 0x5C, "StructJ definition");

/* size 0x24 */
struct StringHolder {
    /* off 0x0 size 0x4 */
    u32 unk;

    /* off 0x4 size 0x4 */
    u32 unk2;

    /* off 0x8 size 0x4 */
    u16 *str16;

    /* off 0xC size 0x16 */
    char str8[22];

    /* off 0x22 size 0x2 */
    u16 unk3;

} __attribute__((packed));
_Static_assert(sizeof(StringHolder) == 0x24, "StringHolder definition");

/* size 0x12C */
struct StructK {
    /* off 0x0 size 0x24 */
    StringHolder user_name_str;

    /* off 0x24 size 0x108 */
    u32 ks[66];

} __attribute__((packed));
_Static_assert(sizeof(StructK) == 0x12C, "StructK definition");

/* size 0x1C */
struct StructLSub {
    /* off 0x0 size 0x4 */
    u32 ls1;

    /* off 0x4 size 0x1 */
    u8 ls2;

    /* off 0x5 size 0x1 */
    u8 ls3;

    /* off 0x6 size 0x1 */
    u8 ls4;

    /* off 0x7 size 0x1 */
    u8 ls5;

    /* off 0x8 size 0x2 */
    u16 ls6;

    /* off 0xA size 0x2 */
    u16 ls7;

    /* off 0xC size 0x4 */
    u32 ls8;

    /* off 0x10 size 0x4 */
    u32 ls9;

    /* off 0x14 size 0x2 */
    u16 ls10;

    /* off 0x16 size 0x2 */
    u16 ls11;

    /* off 0x18 size 0x2 */
    u16 ls12;

    /* off 0x1A size 0x2 */
    u16 ls13;

} __attribute__((packed));
_Static_assert(sizeof(StructLSub) == 0x1C, "StructLSub definition");

/* size 0xC */
struct StructM {
    /* off 0x0 size 0x4 */
    u32 m1;

    /* off 0x4 size 0x4 */
    u32 m2;

    /* off 0x8 size 0x4 */
    u32 m3;

} __attribute__((packed));
_Static_assert(sizeof(StructM) == 0xC, "StructM definition");

/* size 0x58 */
struct StructN {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x4 */
    u32 some_entry_id;

    /* off 0x8 size 0x4 */
    u32 n3;

    /* off 0xC size 0x1 */
    u8 n41;

    /* off 0xD size 0x1 */
    u8 n42;

    /* off 0xE size 0x1 */
    u8 n43;

    /* off 0xF size 0x1 */
    u8 n44;

    /* off 0x10 size 0x4 */
    u32 n5;

    /* off 0x14 size 0x4 */
    u32 n6;

    /* off 0x18 size 0x4 */
    void *entry_buf;

    /* off 0x1C size 0x4 */
    u32 ncgr_ptr;

    /* off 0x20 size 0x4 */
    u32 ncer_ptr;

    /* off 0x24 size 0x4 */
    void *rahc_ptr;

    /* off 0x28 size 0x4 */
    void *kbec_ptr;

    /* off 0x2C size 0x2C */
    u32 uug[11];

} __attribute__((packed));
_Static_assert(sizeof(StructN) == 0x58, "StructN definition");

/* size 0x4948 */
struct StructG {
    /* off 0x0 size 0x4948 */
    u32 gs[4690];

} __attribute__((packed));
_Static_assert(sizeof(StructG) == 0x4948, "StructG definition");

/* size 0x98 */
struct StructISub {
    /* off 0x0 size 0x5C */
    StructJ strj;

    /* off 0x5C size 0x3C */
    u32 is[15];

} __attribute__((packed));
_Static_assert(sizeof(StructISub) == 0x98, "StructISub definition");

/* size 0x8C */
struct StructGUI {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x88 */
    u32 guis[34];

} __attribute__((packed));
_Static_assert(sizeof(StructGUI) == 0x8C, "StructGUI definition");

/* size 0x14 */
struct StructQSub {
    /* off 0x0 size 0x4 */
    u32 color_depth_bpp;

    /* off 0x4 size 0x4 */
    u32 unk_zero;

    /* off 0x8 size 0xC */
    u32 hs[3];

} __attribute__((packed));
_Static_assert(sizeof(StructQSub) == 0x14, "StructQSub definition");

/* size 0x90 */
struct StructPSub {
    /* off 0x0 size 0x4 */
    int _s1;

    /* off 0x4 size 0x1 */
    u8 _s21;

    /* off 0x5 size 0x1 */
    u8 some_word_count;

    /* off 0x6 size 0x6 */
    u16 vals_maybe_entry_ids[3];

    /* off 0xC size 0x4 */
    char *match_name;

    /* off 0x10 size 0x80 */
    char some_str[128];

} __attribute__((packed));
_Static_assert(sizeof(StructPSub) == 0x90, "StructPSub definition");

/* size 0x14 */
struct StructFSub {
    /* off 0x0 size 0x4 */
    u32 fs1;

    /* off 0x4 size 0x4 */
    u32 fs2;

    /* off 0x8 size 0x4 */
    u32 some_size;

    /* off 0xC size 0x1 */
    u8 other_fsub_1;

    /* off 0xD size 0x1 */
    u8 some_count;

    /* off 0xE size 0x1 */
    u8 fs43;

    /* off 0xF size 0x1 */
    u8 maybe_status;

    /* off 0x10 size 0x1 */
    u8 fs51;

    /* off 0x11 size 0x1 */
    u8 fs52;

    /* off 0x12 size 0x1 */
    u8 fs53;

    /* off 0x13 size 0x1 */
    u8 fs54;

} __attribute__((packed));
_Static_assert(sizeof(StructFSub) == 0x14, "StructFSub definition");

/* size 0x34 */
struct StructR {
    /* off 0x0 size 0x4 */
    u32 some_file_id;

    /* off 0x4 size 0x4 */
    StructR *rr1;

    /* off 0x8 size 0x4 */
    u32 rr2;

    /* off 0xC size 0x4 */
    u32 rr3;

    /* off 0x10 size 0x4 */
    u32 rr4;

    /* off 0x14 size 0x4 */
    u32 rr5;

    /* off 0x18 size 0x4 */
    u32 rr6;

    /* off 0x1C size 0x4 */
    u32 rr7;

    /* off 0x20 size 0x4 */
    u32 rr8;

    /* off 0x24 size 0x4 */
    u32 rr9;

    /* off 0x28 size 0x4 */
    u32 rr10;

    /* off 0x2C size 0x4 */
    u32 rr11;

    /* off 0x30 size 0x4 */
    u32 rr12;

} __attribute__((packed));
_Static_assert(sizeof(StructR) == 0x34, "StructR definition");

/* size 0x20 */
struct StructS {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x4 */
    StructSSub *sub1;

    /* off 0x8 size 0x4 */
    StructSSub *sub2;

    /* off 0xC size 0x4 */
    StructSSub *sub3;

    /* off 0x10 size 0x4 */
    StructSSub *sub4;

    /* off 0x14 size 0x4 */
    StructSSub *sub5;

    /* off 0x18 size 0x4 */
    StructSSub *sub6;

    /* off 0x1C size 0x4 */
    StructB *strb;

} __attribute__((packed));
_Static_assert(sizeof(StructS) == 0x20, "StructS definition");

/* size 0x48 */
struct StructSSub {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x4 */
    u32 sb1;

    /* off 0x8 size 0x4 */
    u32 sb2;

    /* off 0xC size 0x24 */
    u32 sb3s[9];

    /* off 0x30 size 0x4 */
    u32 sb4;

    /* off 0x34 size 0x4 */
    u32 sb5;

    /* off 0x38 size 0x4 */
    u32 sb6;

    /* off 0x3C size 0x4 */
    u32 sb7;

    /* off 0x40 size 0x4 */
    u32 sb8;

    /* off 0x44 size 0x4 */
    u32 sb9;

} __attribute__((packed));
_Static_assert(sizeof(StructSSub) == 0x48, "StructSSub definition");

/* size 0x34 */
struct StructT {
    /* off 0x0 size 0x1 */
    u8 some_idx;

    /* off 0x1 size 0x1 */
    u8 t1a2;

    /* off 0x2 size 0x2 */
    u16 t1b;

    /* off 0x4 size 0x2 */
    u16 t2a;

    /* off 0x6 size 0x2 */
    u16 t2b;

    /* off 0x8 size 0x2 */
    u16 t3a;

    /* off 0xA size 0x2 */
    u16 t3b;

    /* off 0xC size 0x4 */
    u32 t4;

    /* off 0x10 size 0x4 */
    u32 t5;

    /* off 0x14 size 0x4 */
    u32 t6;

    /* off 0x18 size 0x4 */
    u32 t7;

    /* off 0x1C size 0x1 */
    u8 t8a1;

    /* off 0x1D size 0x1 */
    u8 t8a2;

    /* off 0x1E size 0x2 */
    u16 t8b;

    /* off 0x20 size 0x2 */
    u16 t9a;

    /* off 0x22 size 0x1 */
    u8 t9b1;

    /* off 0x23 size 0x1 */
    u8 t9b2;

    /* off 0x24 size 0x4 */
    u32 t10;

    /* off 0x28 size 0x1 */
    u8 some_str_size;

    /* off 0x29 size 0x1 */
    u8 t11b;

    /* off 0x2A size 0x1 */
    u8 t11c;

    /* off 0x2B size 0x1 */
    u8 t11d;

    /* off 0x2C size 0x4 */
    char *some_str_p;

    /* off 0x30 size 0x2 */
    u16 t13a;

    /* off 0x32 size 0x1 */
    u8 t13b1;

    /* off 0x33 size 0x1 */
    u8 t13b2;

} __attribute__((packed));
_Static_assert(sizeof(StructT) == 0x34, "StructT definition");

/* size 0x3C */
struct Adjective {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x4 */
    Object *obj_ref;

    /* off 0x8 size 0x2 */
    u16 file1;

    /* off 0xA size 0x2 */
    u16 file2;

    /* off 0xC size 0x2 */
    u16 short_adj_id;

    /* off 0xE size 0x2 */
    u16 file_id;

    /* off 0x10 size 0x2 */
    u16 g7;

    /* off 0x12 size 0x1 */
    u8 file4_val_mask_1;

    /* off 0x13 size 0x1 */
    u8 file4_val_mask_2;

    /* off 0x14 size 0x1 */
    u8 g91;

    /* off 0x15 size 0x1 */
    u8 g92;

    /* off 0x16 size 0x1 */
    u8 file51a;

    /* off 0x17 size 0x1 */
    u8 file51b;

    /* off 0x18 size 0x2 */
    u16 file52;

    /* off 0x1A size 0x1 */
    u8 gs111;

    /* off 0x1B size 0x1 */
    u8 gs112;

    /* off 0x1C size 0x1 */
    u8 gs121;

    /* off 0x1D size 0x1 */
    u8 gs122;

    /* off 0x1E size 0x2 */
    u16 tt;

    /* off 0x20 size 0x4 */
    StructOSubSubSub *sub_1;

    /* off 0x24 size 0x4 */
    StructOSubSubSub *sub_2;

    /* off 0x28 size 0x4 */
    StructV1 **v1s;

    /* off 0x2C size 0x1 */
    u8 v1_count;

    /* off 0x2D size 0x1 */
    u8 some_v1_idx;

    /* off 0x2E size 0x1 */
    u8 gs5c;

    /* off 0x2F size 0x1 */
    u8 gs5d;

    /* off 0x30 size 0x1 */
    u8 gs61;

    /* off 0x31 size 0x1 */
    u8 gs62;

    /* off 0x32 size 0x1 */
    u8 gs63;

    /* off 0x33 size 0x1 */
    u8 gs64;

    /* off 0x34 size 0x4 */
    u32 gs7;

    /* off 0x38 size 0x4 */
    Adjective *other_adj;

} __attribute__((packed));
_Static_assert(sizeof(Adjective) == 0x3C, "Adjective definition");

/* size 0x14 */
struct StructOSubSubSub {
    /* off 0x0 size 0x4 */
    u32 fileunk32;

    /* off 0x4 size 0x4 */
    StructOSubSubSubList16 *list16;

    /* off 0x8 size 0x4 */
    u8 *f_some_u8_arr;

    /* off 0xC size 0x1 */
    u8 f_some_count;

    /* off 0xD size 0x1 */
    u8 nonzero_u8_arr_count;

    /* off 0xE size 0x1 */
    u8 unk16_2_is_2868;

    /* off 0xF size 0x1 */
    u8 unk16_2_is_2869;

    /* off 0x10 size 0x1 */
    u8 some_flag;

    /* off 0x11 size 0x1 */
    u8 gs61b;

    /* off 0x12 size 0x2 */
    u16 gs62;

} __attribute__((packed));
_Static_assert(sizeof(StructOSubSubSub) == 0x14, "StructOSubSubSub definition");

/* size 0x10 */
struct StructV2 {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x1 */
    u8 v221;

    /* off 0x5 size 0x1 */
    u8 ptr_count;

    /* off 0x6 size 0x1 */
    u8 idx;

    /* off 0x7 size 0x1 */
    u8 v224;

    /* off 0x8 size 0x4 */
    u32 *ptr_arr;

    /* off 0xC size 0x4 */
    Adjective *subsub;

} __attribute__((packed));
_Static_assert(sizeof(StructV2) == 0x10, "StructV2 definition");

/* size 0x10 */
struct StructOSubSubSubList16 {
    /* off 0x0 size 0x1 */
    u8 entry_is_nonzero;

    /* off 0x1 size 0x1 */
    u8 u2;

    /* off 0x2 size 0x2 */
    u16 unk16_1;

    /* off 0x4 size 0x2 */
    u16 unk16_2;

    /* off 0x6 size 0x2 */
    u16 unk16_3;

    /* off 0x8 size 0x2 */
    u16 unk16_4;

    /* off 0xA size 0x2 */
    u16 unk16_5;

    /* off 0xC size 0x2 */
    u16 unk16_6;

    /* off 0xE size 0x2 */
    u16 unk16_7_short_adj_id;

} __attribute__((packed));
_Static_assert(sizeof(StructOSubSubSubList16) == 0x10, "StructOSubSubSubList16 definition");

/* size 0x40 */
struct StructV {
    /* off 0x0 size 0x1 */
    u8 maybe_particle_kind;

    /* off 0x1 size 0x1 */
    u8 _v2;

    /* off 0x2 size 0x1 */
    u8 _v3;

    /* off 0x3 size 0x1 */
    u8 _v4;

    /* off 0x4 size 0x4 */
    u32 _v5;

    /* off 0x8 size 0x4 */
    u32 _v6;

    /* off 0xC size 0x4 */
    u32 _v7;

    /* off 0x10 size 0x4 */
    u32 _v8;

    /* off 0x14 size 0x4 */
    u32 _v9;

    /* off 0x18 size 0x2 */
    u16 v101;

    /* off 0x1A size 0x2 */
    u16 v102;

    /* off 0x1C size 0x4 */
    u32 _v11;

    /* off 0x20 size 0x4 */
    u32 _v12;

    /* off 0x24 size 0x4 */
    u32 _v13;

    /* off 0x28 size 0x4 */
    u32 some_adj_file_id;

    /* off 0x2C size 0x4 */
    u32 _v15;

    /* off 0x30 size 0x4 */
    u32 some_adj_file_id2;

    /* off 0x34 size 0x4 */
    u32 _v17;

    /* off 0x38 size 0x4 */
    u32 _v18;

    /* off 0x3C size 0x4 */
    u32 _v19;

} __attribute__((packed));
_Static_assert(sizeof(StructV) == 0x40, "StructV definition");

/* size 0x10 */
struct PaletteBlock {
    /* off 0x0 size 0x4 */
    u32 color_depth_bpp;

    /* off 0x4 size 0x4 */
    u32 zero;

    /* off 0x8 size 0x4 */
    u32 palette_data_size;

    /* off 0xC size 0x4 */
    void *palette_data_offset;

} __attribute__((packed));
_Static_assert(sizeof(PaletteBlock) == 0x10, "PaletteBlock definition");

/* size 0x64 */
struct StructW {
    /* off 0x0 size 0x4 */
    u32 w1;

    /* off 0x4 size 0x4 */
    u32 w2;

    /* off 0x8 size 0x4 */
    u32 w3;

    /* off 0xC size 0x4 */
    u32 w4;

    /* off 0x10 size 0x2 */
    u16 w51;

    /* off 0x12 size 0x2 */
    u16 w52;

    /* off 0x14 size 0x4 */
    u32 w6;

    /* off 0x18 size 0x4 */
    u32 w7;

    /* off 0x1C size 0x4 */
    u32 w8;

    /* off 0x20 size 0x1 */
    u8 w91;

    /* off 0x21 size 0x1 */
    u8 w92;

    /* off 0x22 size 0x1 */
    u8 w93;

    /* off 0x23 size 0x1 */
    u8 w94;

    /* off 0x24 size 0x40 */
    StructV v;

} __attribute__((packed));
_Static_assert(sizeof(StructW) == 0x64, "StructW definition");

/* size 0x1C */
struct StructX {
    /* off 0x0 size 0x1C */
    u32 xs[7];

} __attribute__((packed));
_Static_assert(sizeof(StructX) == 0x1C, "StructX definition");

/* size 0x8 */
struct StructOB {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x1 */
    u8 b2;

    /* off 0x5 size 0x1 */
    u8 b3;

    /* off 0x6 size 0x1 */
    u8 b4;

    /* off 0x7 size 0x1 */
    u8 b5;

} __attribute__((packed));
_Static_assert(sizeof(StructOB) == 0x8, "StructOB definition");

/* size 0x44 */
struct StructOC {
    /* off 0x0 size 0x4 */
    u32 os312c1;

    /* off 0x4 size 0x4 */
    Object *obj_ref;

    /* off 0x8 size 0x1 */
    u8 os3a1;

    /* off 0x9 size 0x1 */
    u8 os3a2;

    /* off 0xA size 0x1 */
    u8 os3a3;

    /* off 0xB size 0x1 */
    u8 os3a4;

    /* off 0xC size 0x4 */
    u32 os1_mask_a;

    /* off 0x10 size 0x4 */
    u32 some_ptr_slot_idx;

    /* off 0x14 size 0x1 */
    u8 os311;

    /* off 0x15 size 0x1 */
    u8 os312;

    /* off 0x16 size 0x1 */
    u8 os321;

    /* off 0x17 size 0x1 */
    u8 os322;

    /* off 0x18 size 0x1 */
    u8 yty1;

    /* off 0x19 size 0x1 */
    u8 yty2;

    /* off 0x1A size 0x1 */
    u8 yty3;

    /* off 0x1B size 0x1 */
    u8 yty4;

    /* off 0x1C size 0x24 */
    u32 arr[9];

    /* off 0x40 size 0x1 */
    u8 c101;

    /* off 0x41 size 0x1 */
    u8 c102;

    /* off 0x42 size 0x1 */
    u8 c103;

    /* off 0x43 size 0x1 */
    u8 c104;

} __attribute__((packed));
_Static_assert(sizeof(StructOC) == 0x44, "StructOC definition");

/* size 0x14 */
struct StructOD {
    /* off 0x0 size 0x4 */
    u32 like_another_ptr_slot_idx;

    /* off 0x4 size 0x1 */
    u8 os321a;

    /* off 0x5 size 0x1 */
    u8 os321b_mask;

    /* off 0x6 size 0x1 */
    u8 os321c;

    /* off 0x7 size 0x1 */
    u8 os321d;

    /* off 0x8 size 0x1 */
    u8 os31a;

    /* off 0x9 size 0x1 */
    u8 os31b;

    /* off 0xA size 0x1 */
    u8 os31c;

    /* off 0xB size 0x1 */
    u8 os31d;

    /* off 0xC size 0x1 */
    u8 os21;

    /* off 0xD size 0x1 */
    u8 os22;

    /* off 0xE size 0x1 */
    u8 os23;

    /* off 0xF size 0x1 */
    u8 os24;

    /* off 0x10 size 0x4 */
    Object *stro_ref;

} __attribute__((packed));
_Static_assert(sizeof(StructOD) == 0x14, "StructOD definition");

/* size 0x14 */
struct StructOE {
    /* off 0x0 size 0x4 */
    u32 oe1;

    /* off 0x4 size 0x4 */
    u32 oe2;

    /* off 0x8 size 0x4 */
    u32 oe3;

    /* off 0xC size 0x4 */
    u32 oe4;

    /* off 0x10 size 0x4 */
    u32 oe5;

} __attribute__((packed));
_Static_assert(sizeof(StructOE) == 0x14, "StructOE definition");

/* size 0x10 */
struct StructOF {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x1 */
    u8 mask_a;

    /* off 0x5 size 0x1 */
    u8 rqtqr2;

    /* off 0x6 size 0x1 */
    u8 mask_b;

    /* off 0x7 size 0x1 */
    u8 rqtqr4;

    /* off 0x8 size 0x1 */
    u8 like_unk8_2;

    /* off 0x9 size 0x1 */
    u8 file_unk8_2;

    /* off 0xA size 0x1 */
    u8 os32223;

    /* off 0xB size 0x1 */
    u8 os32224;

    /* off 0xC size 0x2 */
    u16 os32225;

    /* off 0xE size 0x1 */
    u8 os32227;

    /* off 0xF size 0x1 */
    u8 os32228;

} __attribute__((packed));
_Static_assert(sizeof(StructOF) == 0x10, "StructOF definition");

/* size 0x180 */
struct StructOG {
    /* off 0x0 size 0x4 */
    Object *obj_ref;

    /* off 0x4 size 0x1 */
    u8 osg1;

    /* off 0x5 size 0x1 */
    u8 osg2;

    /* off 0x6 size 0x1 */
    u8 osg3;

    /* off 0x7 size 0x1 */
    u8 osg4;

    /* off 0x8 size 0x28 */
    u32 os32211[10];

    /* off 0x30 size 0x1 */
    u8 os32212a1;

    /* off 0x31 size 0x1 */
    u8 os32212a2;

    /* off 0x32 size 0x1 */
    u8 os32212a3;

    /* off 0x33 size 0x1 */
    u8 os32212a4;

    /* off 0x34 size 0x78 */
    u32 os32212[30];

    /* off 0xAC size 0x4 */
    u32 osx;

    /* off 0xB0 size 0x4 */
    u32 osy;

    /* off 0xB4 size 0x4 */
    u32 osz;

    /* off 0xB8 size 0x44 */
    u32 os32221[17];

    /* off 0xFC size 0x1 */
    u8 osq1;

    /* off 0xFD size 0x1 */
    u8 osq2;

    /* off 0xFE size 0x1 */
    u8 osq3;

    /* off 0xFF size 0x1 */
    u8 osq4;

    /* off 0x100 size 0x10 */
    u32 os32222[4];

    /* off 0x110 size 0x1 */
    u8 os2931;

    /* off 0x111 size 0x1 */
    u8 os2932;

    /* off 0x112 size 0x1 */
    u8 os2933;

    /* off 0x113 size 0x1 */
    u8 os2934;

    /* off 0x114 size 0x1 */
    u8 os2941;

    /* off 0x115 size 0x1 */
    u8 os2942;

    /* off 0x116 size 0x1 */
    u8 os2943;

    /* off 0x117 size 0x1 */
    u8 os2944;

    /* off 0x118 size 0x1 */
    u8 os331_some_flag;

    /* off 0x119 size 0x1 */
    u8 os332;

    /* off 0x11A size 0x1 */
    u8 os333;

    /* off 0x11B size 0x1 */
    u8 os334;

    /* off 0x11C size 0x4 */
    u32 os335;

    /* off 0x120 size 0x4 */
    u32 os336;

    /* off 0x124 size 0x1 */
    u8 os3371;

    /* off 0x125 size 0x1 */
    u8 os3372;

    /* off 0x126 size 0x1 */
    u8 os3373;

    /* off 0x127 size 0x1 */
    u8 os3374;

    /* off 0x128 size 0x1 */
    u8 os3381;

    /* off 0x129 size 0x1 */
    u8 os3382;

    /* off 0x12A size 0x1 */
    u8 cannot_hold_obj_in_hand;

    /* off 0x12B size 0x1 */
    u8 is_invisible;

    /* off 0x12C size 0x54 */
    u32 os33a[21];

} __attribute__((packed));
_Static_assert(sizeof(StructOG) == 0x180, "StructOG definition");

/* size 0x24 */
struct StructOH {
    /* off 0x0 size 0x4 */
    u32 *some_anim_arr32_buf;

    /* off 0x4 size 0x4 */
    u32 h2;

    /* off 0x8 size 0x2 */
    u16 h31;

    /* off 0xA size 0x1 */
    u8 h321;

    /* off 0xB size 0x1 */
    u8 h322;

    /* off 0xC size 0x1 */
    u8 h41;

    /* off 0xD size 0x1 */
    u8 h42;

    /* off 0xE size 0x1 */
    u8 h43;

    /* off 0xF size 0x1 */
    u8 h44;

    /* off 0x10 size 0x4 */
    u32 h5;

    /* off 0x14 size 0x1 */
    u8 h61;

    /* off 0x15 size 0x1 */
    u8 h62;

    /* off 0x16 size 0x1 */
    u8 h63;

    /* off 0x17 size 0x1 */
    u8 h64;

    /* off 0x18 size 0x4 */
    u32 h7;

    /* off 0x1C size 0x4 */
    u32 h8_obj;

    /* off 0x20 size 0x1 */
    u8 h91;

    /* off 0x21 size 0x1 */
    u8 h92;

    /* off 0x22 size 0x1 */
    u8 h93;

    /* off 0x23 size 0x1 */
    u8 h94;

} __attribute__((packed));
_Static_assert(sizeof(StructOH) == 0x24, "StructOH definition");

/* size 0xC */
struct vector_Object {
    /* off 0x0 size 0x4 */
    Object **ptr;

    /* off 0x4 size 0x4 */
    u32 size;

    /* off 0x8 size 0x4 */
    u32 capacity;

} __attribute__((packed));
_Static_assert(sizeof(vector_Object) == 0xC, "vector_Object definition");

/* size 0xA */
struct StructY {
    /* off 0x0 size 0x2 */
    u16 y1;

    /* off 0x2 size 0x2 */
    u16 y2;

    /* off 0x4 size 0x2 */
    u16 y3;

    /* off 0x6 size 0x1 */
    u8 y4;

    /* off 0x7 size 0x1 */
    u8 y5;

    /* off 0x8 size 0x1 */
    u8 y6;

    /* off 0x9 size 0x1 */
    u8 y7;

} __attribute__((packed));
_Static_assert(sizeof(StructY) == 0xA, "StructY definition");

/* size 0x2034 */
struct StructCC {
    /* off 0x0 size 0x4 */
    u32 c0;

    /* off 0x4 size 0x4 */
    u32 base_pos_x_fx;

    /* off 0x8 size 0x4 */
    u32 base_pos_y_fx;

    /* off 0xC size 0x2020 */
    u32 ccs[2056];

    /* off 0x202C size 0x2 */
    u16 cx;

    /* off 0x202E size 0x2 */
    u16 cy;

    /* off 0x2030 size 0x4 */
    u32 clast;

} __attribute__((packed));
_Static_assert(sizeof(StructCC) == 0x2034, "StructCC definition");

/* size 0x10 */
struct StructDX {
    /* off 0x0 size 0x4 */
    StructBB *strbb;

    /* off 0x4 size 0x4 */
    u32 dx2;

    /* off 0x8 size 0x4 */
    u32 dx3;

    /* off 0xC size 0x4 */
    StructI *stri;

} __attribute__((packed));
_Static_assert(sizeof(StructDX) == 0x10, "StructDX definition");

/* size 0x7C */
struct StructIBase {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x2 */
    u16 i3;

    /* off 0x6 size 0x2 */
    u16 i4;

    /* off 0x8 size 0x1 */
    u8 i51;

    /* off 0x9 size 0x1 */
    u8 i52;

    /* off 0xA size 0x2 */
    u16 i6;

    /* off 0xC size 0x2 */
    u16 i7;

    /* off 0xE size 0x2 */
    u16 i8;

    /* off 0x10 size 0x2 */
    u16 i9;

    /* off 0x12 size 0x2 */
    u16 i10;

    /* off 0x14 size 0x2 */
    u16 i11;

    /* off 0x16 size 0x2 */
    u16 i12;

    /* off 0x18 size 0x1 */
    u8 i131;

    /* off 0x19 size 0x1 */
    u8 i132;

    /* off 0x1A size 0x1 */
    u8 maybe_dispcnt_val;

    /* off 0x1B size 0x1 */
    u8 i142;

    /* off 0x1C size 0x2 */
    u16 i15;

    /* off 0x1E size 0x2 */
    u16 i1x;

    /* off 0x20 size 0x2 */
    u16 i17;

    /* off 0x22 size 0x2 */
    u16 i18;

    /* off 0x24 size 0x1 */
    u8 i191;

    /* off 0x25 size 0x1 */
    u8 i192;

    /* off 0x26 size 0x1 */
    u8 i201;

    /* off 0x27 size 0x1 */
    u8 bg_screen_size;

    /* off 0x28 size 0x1 */
    u8 i211;

    /* off 0x29 size 0x1 */
    u8 i212;

    /* off 0x2A size 0x1 */
    u8 bg0cnt_top_char_base_block;

    /* off 0x2B size 0x1 */
    u8 bg0cnt_top_scr_base_block;

    /* off 0x2C size 0x1 */
    u8 bg1cnt_top_char_base_block;

    /* off 0x2D size 0x1 */
    u8 bg1cnt_top_scr_base_block;

    /* off 0x2E size 0x1 */
    u8 bg2cnt_top_char_base_block;

    /* off 0x2F size 0x1 */
    u8 bg2cnt_top_scr_base_block;

    /* off 0x30 size 0x1 */
    u8 bg3cnt_top_char_base_block;

    /* off 0x31 size 0x1 */
    u8 bg3cnt_top_scr_base_block;

    /* off 0x32 size 0x1 */
    u8 bg0cnt_sub_char_base_block;

    /* off 0x33 size 0x1 */
    u8 bg0cnt_sub_scr_base_block;

    /* off 0x34 size 0x1 */
    u8 bg1cnt_sub_char_base_block;

    /* off 0x35 size 0x1 */
    u8 bg1cnt_sub_scr_base_block;

    /* off 0x36 size 0x1 */
    u8 bg2cnt_sub_char_base_block;

    /* off 0x37 size 0x1 */
    u8 bg2cnt_sub_scr_base_block;

    /* off 0x38 size 0x1 */
    u8 bg3cnt_sub_char_base_block;

    /* off 0x39 size 0x1 */
    u8 bg3cnt_sub_scr_base_block;

    /* off 0x3A size 0x2 */
    u16 i30;

    /* off 0x3C size 0x2 */
    u16 entry_id_7a;

    /* off 0x3E size 0x2 */
    u16 entry_id_7b;

    /* off 0x40 size 0x2 */
    u16 entry_id_988_990_986_992;

    /* off 0x42 size 0x2 */
    u16 entry_id_987_989_985_991;

    /* off 0x44 size 0x2 */
    u16 entry_id_9a;

    /* off 0x46 size 0x2 */
    u16 entry_id_9b;

    /* off 0x48 size 0x2 */
    u16 entry_id_984_2;

    /* off 0x4A size 0x2 */
    u16 entry_id_10b;

    /* off 0x4C size 0x2 */
    u16 entry_id_2a;

    /* off 0x4E size 0x2 */
    u16 entry_id_2b;

    /* off 0x50 size 0x2 */
    u16 entry_id_1a;

    /* off 0x52 size 0x2 */
    u16 entry_id_1b;

    /* off 0x54 size 0x2 */
    u16 entry_id_5a;

    /* off 0x56 size 0x2 */
    u16 entry_id_5b;

    /* off 0x58 size 0x2 */
    u16 entry_id_984;

    /* off 0x5A size 0x2 */
    u16 entry_id_6b;

    /* off 0x5C size 0x2 */
    u16 i47;

    /* off 0x5E size 0x2 */
    u16 some_file_id;

    /* off 0x60 size 0x2 */
    u16 i49;

    /* off 0x62 size 0x2 */
    u16 some_file_id_2;

    /* off 0x64 size 0x2 */
    u16 entry_id_993;

    /* off 0x66 size 0x2 */
    u16 entry_id_0;

    /* off 0x68 size 0x2 */
    u16 i53;

    /* off 0x6A size 0x2 */
    u16 i54;

    /* off 0x6C size 0x2 */
    u16 i55;

    /* off 0x6E size 0x2 */
    u16 i56;

    /* off 0x70 size 0x2 */
    u16 entry_id_994;

    /* off 0x72 size 0x2 */
    u16 i58;

    /* off 0x74 size 0x2 */
    u16 entry_id_996;

    /* off 0x76 size 0x2 */
    u16 pltt_entry_id_2;

    /* off 0x78 size 0x2 */
    u16 entry_id_995;

    /* off 0x7A size 0x2 */
    u16 i62;

} __attribute__((packed));
_Static_assert(sizeof(StructIBase) == 0x7C, "StructIBase definition");

/* size 0x14 */
struct StructDD {
    /* off 0x0 size 0x4 */
    u32 dd1;

    /* off 0x4 size 0x4 */
    u32 dd2;

    /* off 0x8 size 0x4 */
    StructDD1 *strdd1;

    /* off 0xC size 0x4 */
    StructDD1 *strdd1_2;

    /* off 0x10 size 0x4 */
    StructDD2 *strdd2;

} __attribute__((packed));
_Static_assert(sizeof(StructDD) == 0x14, "StructDD definition");

/* size 0xC */
struct StructDD1 {
    /* off 0x0 size 0x4 */
    u32 x;

    /* off 0x4 size 0x4 */
    u32 y;

    /* off 0x8 size 0x4 */
    u32 z;

} __attribute__((packed));
_Static_assert(sizeof(StructDD1) == 0xC, "StructDD1 definition");

/* size 0x124 */
struct StructZ {
    /* off 0x0 size 0x124 */
    u32 zs[73];

} __attribute__((packed));
_Static_assert(sizeof(StructZ) == 0x124, "StructZ definition");

/* size 0x24 */
struct StructAA {
    /* off 0x0 size 0x4 */
    u32 a1;

    /* off 0x4 size 0x4 */
    u32 a2;

    /* off 0x8 size 0x4 */
    u32 a3;

    /* off 0xC size 0x4 */
    u32 a4;

    /* off 0x10 size 0x4 */
    u32 a5;

    /* off 0x14 size 0x4 */
    u32 a6;

    /* off 0x18 size 0x4 */
    u32 a7;

    /* off 0x1C size 0x4 */
    u32 a8;

    /* off 0x20 size 0x4 */
    u32 a9;

} __attribute__((packed));
_Static_assert(sizeof(StructAA) == 0x24, "StructAA definition");

/* size 0x10 */
struct StructDD2 {
    /* off 0x0 size 0x4 */
    u32 a1;

    /* off 0x4 size 0x4 */
    u32 a2;

    /* off 0x8 size 0x4 */
    u32 a3;

    /* off 0xC size 0x4 */
    u32 a4;

} __attribute__((packed));
_Static_assert(sizeof(StructDD2) == 0x10, "StructDD2 definition");

/* size 0x54 */
struct StructEE {
    /* off 0x0 size 0x4 */
    u32 g;

    /* off 0x4 size 0x50 */
    u32 ggs[20];

} __attribute__((packed));
_Static_assert(sizeof(StructEE) == 0x54, "StructEE definition");

/* size 0x28 */
struct StructESub1 {
    /* off 0x0 size 0x2 */
    u16 in1;

    /* off 0x2 size 0x2 */
    u16 in_pause;

    /* off 0x4 size 0x2 */
    u16 in3;

    /* off 0x6 size 0x2 */
    u16 in4;

    /* off 0x8 size 0x2 */
    u16 in5;

    /* off 0xA size 0x2 */
    u16 in6;

    /* off 0xC size 0x2 */
    u16 in7;

    /* off 0xE size 0x2 */
    u16 in8;

    /* off 0x10 size 0x2 */
    u16 in9;

    /* off 0x12 size 0x2 */
    u16 in10;

    /* off 0x14 size 0x2 */
    u16 in11;

    /* off 0x16 size 0x2 */
    u16 in12;

    /* off 0x18 size 0x2 */
    u16 in_open_notebook;

    /* off 0x1A size 0x2 */
    u16 in14;

    /* off 0x1C size 0x2 */
    u16 in15;

    /* off 0x1E size 0x2 */
    u16 in16;

    /* off 0x20 size 0x2 */
    u16 in_player_move_left;

    /* off 0x22 size 0x2 */
    u16 in_player_move_right;

    /* off 0x24 size 0x2 */
    u16 in_player_jump;

    /* off 0x26 size 0x2 */
    u16 in20;

} __attribute__((packed));
_Static_assert(sizeof(StructESub1) == 0x28, "StructESub1 definition");

/* size 0xC */
struct vector_unk {
    /* off 0x0 size 0x4 */
    void **ptr;

    /* off 0x4 size 0x4 */
    u32 size;

    /* off 0x8 size 0x4 */
    u32 capacity;

} __attribute__((packed));
_Static_assert(sizeof(vector_unk) == 0xC, "vector_unk definition");

/* size 0xC */
struct vector_unk2 {
    /* off 0x0 size 0x4 */
    void **ptr;

    /* off 0x4 size 0x4 */
    u32 size;

    /* off 0x8 size 0x4 */
    u32 capacity;

} __attribute__((packed));
_Static_assert(sizeof(vector_unk2) == 0xC, "vector_unk2 definition");

/* size 0xD8 */
struct StructOOO {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x4 */
    u32 ooo2;

    /* off 0x8 size 0x4 */
    u32 ooo3;

    /* off 0xC size 0x4 */
    u32 ooo4;

    /* off 0x10 size 0x4 */
    u32 ooo5;

    /* off 0x14 size 0x4 */
    u32 ooo6;

    /* off 0x18 size 0x4 */
    u32 ooo7;

    /* off 0x1C size 0x4 */
    u32 ooo8;

    /* off 0x20 size 0x4 */
    u32 ooo9;

    /* off 0x24 size 0x4 */
    u32 ooo10;

    /* off 0x28 size 0x4 */
    u32 ooo11;

    /* off 0x2C size 0x4 */
    u32 ooo12;

    /* off 0x30 size 0x4 */
    u32 ooo13;

    /* off 0x34 size 0x4 */
    u32 ooo14;

    /* off 0x38 size 0x4 */
    u32 ooo15;

    /* off 0x3C size 0x4 */
    u32 ooo16;

    /* off 0x40 size 0x4 */
    u32 ooo17;

    /* off 0x44 size 0x4 */
    u32 ooo18;

    /* off 0x48 size 0x4 */
    u32 ooo19;

    /* off 0x4C size 0x4 */
    u32 ooo20;

    /* off 0x50 size 0x4 */
    u32 ooo21;

    /* off 0x54 size 0x4 */
    u32 ooo22;

    /* off 0x58 size 0x4 */
    u32 ooo23;

    /* off 0x5C size 0x4 */
    u32 ooo24;

    /* off 0x60 size 0x4 */
    u32 ooo25;

    /* off 0x64 size 0x4 */
    u32 ooo26;

    /* off 0x68 size 0x4 */
    u32 ooo27;

    /* off 0x6C size 0x4 */
    u32 ooo28;

    /* off 0x70 size 0x4 */
    u32 ooo29;

    /* off 0x74 size 0x4 */
    u32 ooo30;

    /* off 0x78 size 0x4 */
    u32 ooo31;

    /* off 0x7C size 0x4 */
    u32 ooo32;

    /* off 0x80 size 0x4 */
    u32 ooo33_mask_a;

    /* off 0x84 size 0x1 */
    u8 ooo341;

    /* off 0x85 size 0x1 */
    u8 ooo342;

    /* off 0x86 size 0x1 */
    u8 ooo343;

    /* off 0x87 size 0x1 */
    u8 ooo344;

    /* off 0x88 size 0x1 */
    u8 ooo351;

    /* off 0x89 size 0x1 */
    u8 ooo352;

    /* off 0x8A size 0x1 */
    u8 ooo353;

    /* off 0x8B size 0x1 */
    u8 ooo354;

    /* off 0x8C size 0x1 */
    u8 ooo3611;

    /* off 0x8D size 0x1 */
    u8 ooo3612;

    /* off 0x8E size 0x2 */
    u16 ooo362;

    /* off 0x90 size 0x2 */
    u16 ooo371;

    /* off 0x92 size 0x2 */
    u16 ooo372;

    /* off 0x94 size 0x4 */
    u32 ooo38;

    /* off 0x98 size 0x4 */
    u32 ooo39;

    /* off 0x9C size 0x4 */
    u32 ooo40;

    /* off 0xA0 size 0x4 */
    u32 ooo41;

    /* off 0xA4 size 0x4 */
    u32 ooo42;

    /* off 0xA8 size 0x4 */
    u32 ooo43;

    /* off 0xAC size 0x4 */
    u32 ooo44;

    /* off 0xB0 size 0x4 */
    u32 ooo45;

    /* off 0xB4 size 0x4 */
    u32 ooo46;

    /* off 0xB8 size 0x4 */
    u32 ooo47;

    /* off 0xBC size 0x4 */
    u32 ooo48;

    /* off 0xC0 size 0x4 */
    u32 ooo49;

    /* off 0xC4 size 0x4 */
    u32 ooo50;

    /* off 0xC8 size 0x4 */
    u32 ooo51;

    /* off 0xCC size 0x4 */
    u32 ooo52;

    /* off 0xD0 size 0x4 */
    u32 ooo53;

    /* off 0xD4 size 0x4 */
    u32 ooo54;

} __attribute__((packed));
_Static_assert(sizeof(StructOOO) == 0xD8, "StructOOO definition");

/* size 0xC */
struct vector_unk3 {
    /* off 0x0 size 0x4 */
    void **ptr;

    /* off 0x4 size 0x4 */
    u32 size;

    /* off 0x8 size 0x4 */
    u32 capacity;

} __attribute__((packed));
_Static_assert(sizeof(vector_unk3) == 0xC, "vector_unk3 definition");

/* size 0xF8 */
struct StructOOO2 {
    /* off 0x0 size 0xD8 */
    StructOOO ooo;

    /* off 0xD8 size 0x20 */
    u32 ooo2s[8];

} __attribute__((packed));
_Static_assert(sizeof(StructOOO2) == 0xF8, "StructOOO2 definition");

/* size 0xC */
struct vector_StructJ5 {
    /* off 0x0 size 0x4 */
    StructJ5 **ptr;

    /* off 0x4 size 0x4 */
    u32 size;

    /* off 0x8 size 0x4 */
    u32 capacity;

} __attribute__((packed));
_Static_assert(sizeof(vector_StructJ5) == 0xC, "vector_StructJ5 definition");

/* size 0x20 */
struct StructJBaseBaseBase {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x4 */
    u32 j1;

    /* off 0x8 size 0x4 */
    u32 j2;

    /* off 0xC size 0x4 */
    u32 j3;

    /* off 0x10 size 0x2 */
    u16 j41;

    /* off 0x12 size 0x1 */
    u8 j421;

    /* off 0x13 size 0x1 */
    u8 j422;

    /* off 0x14 size 0x4 */
    u32 j5;

    /* off 0x18 size 0x4 */
    u32 j6;

    /* off 0x1C size 0x4 */
    u32 j7;

} __attribute__((packed));
_Static_assert(sizeof(StructJBaseBaseBase) == 0x20, "StructJBaseBaseBase definition");

/* size 0x3C */
struct StructOU {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x4 */
    u32 ou1;

    /* off 0x8 size 0x4 */
    u32 ou2;

    /* off 0xC size 0x4 */
    u32 ou3;

    /* off 0x10 size 0x2 */
    u16 ou41;

    /* off 0x12 size 0x1 */
    u8 ou421;

    /* off 0x13 size 0x1 */
    u8 ou422;

    /* off 0x14 size 0x4 */
    u32 ou5;

    /* off 0x18 size 0x10 */
    StructISub *ou6[4];

    /* off 0x28 size 0x4 */
    u32 ou10;

    /* off 0x2C size 0x4 */
    u32 ou11;

    /* off 0x30 size 0x4 */
    u32 ou12;

    /* off 0x34 size 0x4 */
    u32 ou13;

    /* off 0x38 size 0x1 */
    u8 ou141;

    /* off 0x39 size 0x1 */
    u8 ou142;

    /* off 0x3A size 0x2 */
    u16 ou143;

} __attribute__((packed));
_Static_assert(sizeof(StructOU) == 0x3C, "StructOU definition");

/* size 0xC */
struct vector_unk4 {
    /* off 0x0 size 0x4 */
    void **ptr;

    /* off 0x4 size 0x4 */
    u32 size;

    /* off 0x8 size 0x4 */
    u32 capacity;

} __attribute__((packed));
_Static_assert(sizeof(vector_unk4) == 0xC, "vector_unk4 definition");

/* size 0x38 */
struct StructOOP {
    /* off 0x0 size 0x4 */
    u32 oop1;

    /* off 0x4 size 0x4 */
    u32 oop2;

    /* off 0x8 size 0x4 */
    u32 oop3;

    /* off 0xC size 0x4 */
    u32 oop4;

    /* off 0x10 size 0x4 */
    u32 oop5;

    /* off 0x14 size 0x4 */
    u32 oop6;

    /* off 0x18 size 0x4 */
    u32 oop7;

    /* off 0x1C size 0x4 */
    u32 oop8;

    /* off 0x20 size 0x4 */
    u32 oop9;

    /* off 0x24 size 0x4 */
    u32 oop10;

    /* off 0x28 size 0x4 */
    u32 oop11;

    /* off 0x2C size 0x4 */
    u32 oop12;

    /* off 0x30 size 0x4 */
    u32 oop13;

    /* off 0x34 size 0x1 */
    u8 oop141;

    /* off 0x35 size 0x1 */
    u8 oop142;

    /* off 0x36 size 0x1 */
    u8 oop143;

    /* off 0x37 size 0x1 */
    u8 oop144;

} __attribute__((packed));
_Static_assert(sizeof(StructOOP) == 0x38, "StructOOP definition");

/* size 0x8 */
struct Vec2 {
    /* off 0x0 size 0x4 */
    fx32 x;

    /* off 0x4 size 0x4 */
    fx32 y;

} __attribute__((packed));
_Static_assert(sizeof(Vec2) == 0x8, "Vec2 definition");

/* size 0x24 */
struct StructDJSub {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x4 */
    u32 dj1;

    /* off 0x8 size 0x4 */
    u32 dj2;

    /* off 0xC size 0x4 */
    u32 dj3;

    /* off 0x10 size 0x2 */
    u16 dj41;

    /* off 0x12 size 0x1 */
    u8 dj421;

    /* off 0x13 size 0x1 */
    u8 dj422;

    /* off 0x14 size 0x4 */
    u32 dj5;

    /* off 0x18 size 0x1 */
    u8 dj61;

    /* off 0x19 size 0x1 */
    u8 dj62;

    /* off 0x1A size 0x1 */
    u8 dj63;

    /* off 0x1B size 0x1 */
    u8 dj64;

    /* off 0x1C size 0x4 */
    u32 dj7;

    /* off 0x20 size 0x4 */
    u32 dj8;

} __attribute__((packed));
_Static_assert(sizeof(StructDJSub) == 0x24, "StructDJSub definition");

/* size 0x1C */
struct StructOIP {
    /* off 0x0 size 0x4 */
    u32 oip1;

    /* off 0x4 size 0x4 */
    u32 oip2;

    /* off 0x8 size 0x4 */
    u32 oip3;

    /* off 0xC size 0x4 */
    u32 oip4;

    /* off 0x10 size 0x4 */
    u32 oip5;

    /* off 0x14 size 0x4 */
    u32 oip6;

    /* off 0x18 size 0x1 */
    u8 oip71;

    /* off 0x19 size 0x1 */
    u8 oip72;

    /* off 0x1A size 0x1 */
    u8 oip73;

    /* off 0x1B size 0x1 */
    u8 oip74;

} __attribute__((packed));
_Static_assert(sizeof(StructOIP) == 0x1C, "StructOIP definition");

/* size 0x14 */
struct StructBB2 {
    /* off 0x0 size 0x4 */
    u32 b1;

    /* off 0x4 size 0x4 */
    u32 *b2_some_arr;

    /* off 0x8 size 0x4 */
    u32 b3;

    /* off 0xC size 0x4 */
    u32 b4;

    /* off 0x10 size 0x1 */
    u8 b5;

    /* off 0x11 size 0x1 */
    u8 b6;

    /* off 0x12 size 0x1 */
    u8 b7;

    /* off 0x13 size 0x1 */
    u8 b8;

} __attribute__((packed));
_Static_assert(sizeof(StructBB2) == 0x14, "StructBB2 definition");

/* size 0xC */
struct StructZX {
    /* off 0x0 size 0x4 */
    u32 zx1;

    /* off 0x4 size 0x4 */
    u32 zx2;

    /* off 0x8 size 0x4 */
    u32 zx3;

} __attribute__((packed));
_Static_assert(sizeof(StructZX) == 0xC, "StructZX definition");

/* size 0x38 */
struct StructBB3 {
    /* off 0x0 size 0x2 */
    u16 bb111;

    /* off 0x2 size 0x2 */
    u16 bb112;

    /* off 0x4 size 0x4 */
    u32 bb2;

    /* off 0x8 size 0x1 */
    u8 bb31;

    /* off 0x9 size 0x1 */
    u8 bb32;

    /* off 0xA size 0x1 */
    u8 bb33;

    /* off 0xB size 0x1 */
    u8 bb34;

    /* off 0xC size 0x4 */
    u32 bb4;

    /* off 0x10 size 0x4 */
    u32 bb5;

    /* off 0x14 size 0x4 */
    u32 bb6;

    /* off 0x18 size 0x4 */
    u32 bb7;

    /* off 0x1C size 0x4 */
    u32 bb8;

    /* off 0x20 size 0x2 */
    u16 bb91;

    /* off 0x22 size 0x2 */
    u16 bb92;

    /* off 0x24 size 0x4 */
    u32 bb10;

    /* off 0x28 size 0x4 */
    u32 bb11;

    /* off 0x2C size 0x4 */
    u32 bb12;

    /* off 0x30 size 0x4 */
    u32 bb13;

    /* off 0x34 size 0x4 */
    u32 bb14;

} __attribute__((packed));
_Static_assert(sizeof(StructBB3) == 0x38, "StructBB3 definition");

/* size 0x10 */
struct StructAN {
    /* off 0x0 size 0x1 */
    u8 a1;

    /* off 0x1 size 0x1 */
    u8 a2;

    /* off 0x2 size 0x1 */
    u8 a3;

    /* off 0x3 size 0x1 */
    u8 a4;

    /* off 0x4 size 0x1 */
    u8 easter_egg_anim;

    /* off 0x5 size 0x1 */
    u8 b2;

    /* off 0x6 size 0x1 */
    u8 b3;

    /* off 0x7 size 0x1 */
    u8 b4;

    /* off 0x8 size 0x4 */
    u32 c;

    /* off 0xC size 0x4 */
    u32 d;

} __attribute__((packed));
_Static_assert(sizeof(StructAN) == 0x10, "StructAN definition");

/* size 0xC */
struct StructBB1 {
    /* off 0x0 size 0x4 */
    u32 b1;

    /* off 0x4 size 0x4 */
    u32 b2;

    /* off 0x8 size 0x4 */
    StructBBB *strbbb;

} __attribute__((packed));
_Static_assert(sizeof(StructBB1) == 0xC, "StructBB1 definition");

/* size 0xC8 */
struct StructBBB {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x1C */
    u32 bbb1s[7];

    /* off 0x20 size 0x4 */
    StructBBX *strbbx;

    /* off 0x24 size 0x14 */
    u32 bbb2s[5];

    /* off 0x38 size 0x4 */
    StructP *strp;

    /* off 0x3C size 0x4 */
    u32 bbb21;

    /* off 0x40 size 0x4 */
    int (__cdecl *bbb22_some_fn)(int, int, basic_string *);

    /* off 0x44 size 0x1 */
    u8 bbb231;

    /* off 0x45 size 0x1 */
    u8 bbb232;

    /* off 0x46 size 0x1 */
    u8 bbb233;

    /* off 0x47 size 0x1 */
    u8 bbb234;

    /* off 0x48 size 0x80 */
    char buf[128];

} __attribute__((packed));
_Static_assert(sizeof(StructBBB) == 0xC8, "StructBBB definition");

/* size 0x54 */
struct StructA0 {
    /* off 0x0 size 0x10 */
    u32 a01s[4];

    /* off 0x10 size 0x1 */
    u8 ab1;

    /* off 0x11 size 0x1 */
    u8 ab2;

    /* off 0x12 size 0x1 */
    u8 ab3;

    /* off 0x13 size 0x1 */
    u8 ab4;

    /* off 0x14 size 0x8 */
    u32 a03s[2];

    /* off 0x1C size 0x1 */
    u8 aa1;

    /* off 0x1D size 0x1 */
    u8 aa2;

    /* off 0x1E size 0x1 */
    u8 aa3;

    /* off 0x1F size 0x1 */
    u8 aa4_some_counter;

    /* off 0x20 size 0x34 */
    u32 a02s[13];

} __attribute__((packed));
_Static_assert(sizeof(StructA0) == 0x54, "StructA0 definition");

/* size 0x14 */
struct StructBBX {
    /* off 0x0 size 0x10 */
    u32 bxs[4];

    /* off 0x10 size 0x2 */
    u16 bx1;

    /* off 0x12 size 0x2 */
    u16 bx2;

} __attribute__((packed));
_Static_assert(sizeof(StructBBX) == 0x14, "StructBBX definition");

/* size 0x14 */
struct Mem_ExpHeapHead {
    /* off 0x0 size 0x8 */
    Mem_ExpHeapMemoryBlockList free_list;

    /* off 0x8 size 0x8 */
    Mem_ExpHeapMemoryBlockList used_list;

    /* off 0x10 size 0x2 */
    _WORD group_id;

    /* off 0x12 size 0x2 */
    _WORD alloc_mode;

} __attribute__((packed));
_Static_assert(sizeof(Mem_ExpHeapHead) == 0x14, "Mem_ExpHeapHead definition");

/* size 0x160 */
struct Bios_CardHeader {
    /* off 0x0 size 0x60 */
    Bios_CardHeaderStart start_h;

    /* off 0x60 size 0x4 */
    u32 cardControl13;

    /* off 0x64 size 0x4 */
    u32 cardControlBF;

    /* off 0x68 size 0x4 */
    u32 bannerOffset;

    /* off 0x6C size 0x2 */
    u16 secureCRC16;

    /* off 0x6E size 0x2 */
    u16 readTimeout;

    /* off 0x70 size 0x4 */
    u32 unknownRAM1;

    /* off 0x74 size 0x4 */
    u32 unknownRAM2;

    /* off 0x78 size 0x4 */
    u32 bfPrime1;

    /* off 0x7C size 0x4 */
    u32 bfPrime2;

    /* off 0x80 size 0x4 */
    u32 romSize;

    /* off 0x84 size 0x4 */
    u32 headerSize;

    /* off 0x88 size 0x38 */
    u32 zeros88[14];

    /* off 0xC0 size 0x9C */
    u8 gbaLogo[156];

    /* off 0x15C size 0x2 */
    u16 logoCRC16;

    /* off 0x15E size 0x2 */
    u16 headerCRC16;

} __attribute__((packed));
_Static_assert(sizeof(Bios_CardHeader) == 0x160, "Bios_CardHeader definition");

/* size 0x48 */
struct Fs_File {
    /* off 0x0 size 0x8 */
    Fs_FileList file_list;

    /* off 0x8 size 0x4 */
    Fs_Archive *arc;

    /* off 0xC size 0x4 */
    u32 flags;

    /* off 0x10 size 0x4 */
    u32 op_id;

    /* off 0x14 size 0x4 */
    u32 op_res;

    /* off 0x18 size 0x8 */
    Os_ThreadQueue op_thr_list;

    /* off 0x20 size 0x10 */
    Fs_File_Entry entry;

    /* off 0x30 size 0x18 */
    Fs_File_OperationArg arg;

} __attribute__((packed));
_Static_assert(sizeof(Fs_File) == 0x48, "Fs_File definition");

/* size 0x18 */
struct Os_Mutex {
    /* off 0x0 size 0x8 */
    Os_ThreadQueue thr_queue;

    /* off 0x8 size 0x4 */
    Os_Thread *thr;

    /* off 0xC size 0x4 */
    u32 count;

    /* off 0x10 size 0x8 */
    Os_MutexQueue queue;

} __attribute__((packed));
_Static_assert(sizeof(Os_Mutex) == 0x18, "Os_Mutex definition");

/* size 0x30 */
struct Os_Alarm {
    /* off 0x0 size 0x4 */
    void (__fastcall *handler_fn)(void *);

    /* off 0x4 size 0x4 */
    void *handler_arg;

    /* off 0x8 size 0x4 */
    u32 tag;

    /* off 0xC size 0x4 */
    u32 fire_tick;

    /* off 0x10 size 0x4 */
    u32 fire_tick_2;

    /* off 0x14 size 0x8 */
    Os_AlarmQueue queue;

    /* off 0x1C size 0x4 */
    u32 period_l;

    /* off 0x20 size 0x4 */
    u32 period_h;

    /* off 0x24 size 0x4 */
    u32 start;

    /* off 0x28 size 0x4 */
    u32 start_2;

    /* off 0x2C size 0x4 */
    u32 unk;

} __attribute__((packed));
_Static_assert(sizeof(Os_Alarm) == 0x30, "Os_Alarm definition");

/* size 0x30 */
struct Mem_HeapHead_Frame {
    /* off 0x0 size 0x4 */
    u32 magic;

    /* off 0x4 size 0x4 */
    u32 h1;

    /* off 0x8 size 0x4 */
    u32 h2;

    /* off 0xC size 0x4 */
    u32 h3;

    /* off 0x10 size 0x4 */
    u32 h4;

    /* off 0x14 size 0x4 */
    u32 h5;

    /* off 0x18 size 0x4 */
    void *heap_start;

    /* off 0x1C size 0x4 */
    void *heap_end;

    /* off 0x20 size 0x4 */
    u32 option;

    /* off 0x24 size 0xC */
    Mem_FrameHeapHead frm_heap_head;

} __attribute__((packed));
_Static_assert(sizeof(Mem_HeapHead_Frame) == 0x30, "Mem_HeapHead_Frame definition");

/* size 0x10 */
struct Mem_FrameHeapState {
    /* off 0x0 size 0x4 */
    u32 id;

    /* off 0x4 size 0x8 */
    Mem_MemoryRegion3 heap_region;

    /* off 0xC size 0x4 */
    Mem_FrameHeapState *next_state;

} __attribute__((packed));
_Static_assert(sizeof(Mem_FrameHeapState) == 0x10, "Mem_FrameHeapState definition");

/* size 0x14 */
union Mem_CommonHeapHead {
    /* off 0x0 size 0x14 */
    Mem_ExpHeapHead exp_heap_head;

    /* off 0x1 size 0xC */
    Mem_FrameHeapHead frm_heap_head;

} __attribute__((packed));
/* size 0x23C0 */
struct StructF {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x43C */
    u32 fs1[271];

    /* off 0x440 size 0x4 */
    u32 system_lang;

    /* off 0x444 size 0x28 */
    u32 fs2[10];

    /* off 0x46C size 0x4 */
    int ollar_count;

    /* off 0x470 size 0x470 */
    u32 fs3[284];

    /* off 0x8E0 size 0x17FC */
    u32 fs213[1535];

    /* off 0x20DC size 0x4 */
    u32 gss;

    /* off 0x20E0 size 0x4 */
    u8 fsas[4];

    /* off 0x20E4 size 0x1 */
    u8 fs31;

    /* off 0x20E5 size 0x1 */
    u8 fs32;

    /* off 0x20E6 size 0x1 */
    u8 fs33;

    /* off 0x20E7 size 0x1 */
    u8 fs34;

    /* off 0x20E8 size 0x4 */
    u32 fsx;

    /* off 0x20EC size 0x4 */
    u32 fsy;

    /* off 0x20F0 size 0xB4 */
    u32 fsx311[45];

    /* off 0x21A4 size 0x4 */
    u8 fsfsfsfs[4];

    /* off 0x21A8 size 0x1 */
    u8 fx1;

    /* off 0x21A9 size 0x1 */
    u8 fx2;

    /* off 0x21AA size 0x1 */
    u8 fx3;

    /* off 0x21AB size 0x1 */
    u8 fx4;

    /* off 0x21AC size 0x1A4 */
    StructFSub fsubs[21];

    /* off 0x2350 size 0x4 */
    u32 fsx3121;

    /* off 0x2354 size 0x4 */
    u32 fsx3122;

    /* off 0x2358 size 0x3C */
    u32 yss11[15];

    /* off 0x2394 size 0x1 */
    u8 yyy1;

    /* off 0x2395 size 0x1 */
    u8 yyy2;

    /* off 0x2396 size 0x1 */
    u8 yyy3;

    /* off 0x2397 size 0x1 */
    u8 yyy4_maybe_needs_saving;

    /* off 0x2398 size 0x1 */
    u8 yss1;

    /* off 0x2399 size 0x1 */
    u8 yss2;

    /* off 0x239A size 0x1 */
    u8 yss3;

    /* off 0x239B size 0x1 */
    u8 yss4;

    /* off 0x239C size 0x4 */
    u32 yssa2;

    /* off 0x23A0 size 0x4 */
    u32 yssa3;

    /* off 0x23A4 size 0x2 */
    u16 card_back_res_lock_id;

    /* off 0x23A6 size 0x1 */
    u8 y3;

    /* off 0x23A7 size 0x1 */
    u8 y4;

    /* off 0x23A8 size 0x4 */
    StructISub *isub;

    /* off 0x23AC size 0x1 */
    u8 y5;

    /* off 0x23AD size 0x1 */
    u8 y6;

    /* off 0x23AE size 0x1 */
    u8 y7;

    /* off 0x23AF size 0x1 */
    u8 y8;

    /* off 0x23B0 size 0x4 */
    u32 y9;

    /* off 0x23B4 size 0xC */
    u32 yss2c[3];

} __attribute__((packed));
_Static_assert(sizeof(StructF) == 0x23C0, "StructF definition");

/* size 0x3C8 */
struct StructI {
    /* off 0x0 size 0x7C */
    StructIBase base;

    /* off 0x7C size 0x4 */
    StructK *hld;

    /* off 0x80 size 0x20 */
    u32 enenen[8];

    /* off 0xA0 size 0x1 */
    u8 yyy1;

    /* off 0xA1 size 0x1 */
    u8 maybe_cur_state;

    /* off 0xA2 size 0x1 */
    u8 yyy3;

    /* off 0xA3 size 0x1 */
    u8 yyy4;

    /* off 0xA4 size 0x54 */
    u32 extras12[21];

    /* off 0xF8 size 0x4 */
    StructJ *somej;

    /* off 0xFC size 0xC0 */
    u32 extras13[48];

    /* off 0x1BC size 0x1 */
    u8 cur_page;

    /* off 0x1BD size 0x1 */
    u8 ra2;

    /* off 0x1BE size 0x1 */
    u8 ra3;

    /* off 0x1BF size 0x1 */
    u8 ra4;

    /* off 0x1C0 size 0x154 */
    u32 extras22[85];

    /* off 0x314 size 0x1 */
    u8 hhhhh1;

    /* off 0x315 size 0x1 */
    u8 hhhhh2;

    /* off 0x316 size 0x1 */
    u8 hhhhh3;

    /* off 0x317 size 0x1 */
    u8 hhhhh4;

    /* off 0x318 size 0x2 */
    u16 ua;

    /* off 0x31A size 0x50 */
    Os_PersonalData data;

    /* off 0x36A size 0x2 */
    u16 qqq;

    /* off 0x36C size 0x4 */
    u32 ez1;

    /* off 0x370 size 0x4 */
    u32 ez2;

    /* off 0x374 size 0x4 */
    u32 wfc_err_code;

    /* off 0x378 size 0x4 */
    u32 ez4;

    /* off 0x37C size 0x4 */
    u32 ez5;

    /* off 0x380 size 0x4 */
    u32 ez6;

    /* off 0x384 size 0x4 */
    u32 ez7;

    /* off 0x388 size 0x4 */
    u32 ez8;

    /* off 0x38C size 0x2 */
    u16 ub;

    /* off 0x38E size 0x16 */
    u16 user_name[11];

    /* off 0x3A4 size 0x4 */
    u32 extras311;

    /* off 0x3A8 size 0x4 */
    StructGUI *strgui;

    /* off 0x3AC size 0x1 */
    u8 first_empty_custom_level_i;

    /* off 0x3AD size 0x1 */
    u8 max_page;

    /* off 0x3AE size 0x1 */
    u8 rb3;

    /* off 0x3AF size 0x1 */
    u8 rb4;

    /* off 0x3B0 size 0x10 */
    StructISub *some_arr[4];

    /* off 0x3C0 size 0x4 */
    u32 ex;

    /* off 0x3C4 size 0x2 */
    u16 ey1;

    /* off 0x3C6 size 0x2 */
    u16 loaded_ovl;

} __attribute__((packed));
_Static_assert(sizeof(StructI) == 0x3C8, "StructI definition");

/* size 0x2E0 */
struct StructL {
    /* off 0x0 size 0x4 */
    u32 l1;

    /* off 0x4 size 0xF0 */
    u32 lsx[60];

    /* off 0xF4 size 0x1C */
    StructLSub lsub;

    /* off 0x110 size 0x1 */
    u8 ls2;

    /* off 0x111 size 0x1 */
    u8 ls3;

    /* off 0x112 size 0x1 */
    u8 ls4;

    /* off 0x113 size 0x1 */
    u8 ls5;

    /* off 0x114 size 0x1CC */
    u32 lsy[115];

} __attribute__((packed));
_Static_assert(sizeof(StructL) == 0x2E0, "StructL definition");

/* size 0x668 */
struct StructP {
    /* off 0x0 size 0x1B0 */
    StructPSub matches[3];

    /* off 0x1B0 size 0x10 */
    u8 p1[16];

    /* off 0x1C0 size 0x8 */
    _QWORD some_tick_val;

    /* off 0x1C8 size 0x1 */
    u8 maybe_completed;

    /* off 0x1C9 size 0x80 */
    char input_str_buf[128];

    /* off 0x249 size 0x80 */
    char ayay_str[128];

    /* off 0x2C9 size 0x3 */
    u8 yuyu[3];

    /* off 0x2CC size 0x4 */
    u32 p221;

    /* off 0x2D0 size 0x4 */
    u32 p222;

    /* off 0x2D4 size 0x1 */
    u8 p223;

    /* off 0x2D5 size 0x80 */
    char another_str[128];

    /* off 0x355 size 0x1 */
    u8 p30_use_ayay_or_ret;

    /* off 0x356 size 0x1 */
    u8 input_spawning;

    /* off 0x357 size 0x1 */
    u8 unk1;

    /* off 0x358 size 0x4 */
    u32 input_str_len;

    /* off 0x35C size 0x80 */
    char yay_str[128];

    /* off 0x3DC size 0x80 */
    char some_str_buf[128];

    /* off 0x45C size 0x80 */
    char char_block_and_obj_name_buf[128];

    /* off 0x4DC size 0x80 */
    char unk[128];

    /* off 0x55C size 0x4 */
    u32 yay;

    /* off 0x560 size 0x100 */
    u8 gg[256];

    /* off 0x660 size 0x4 */
    u32 yay_str_len;

    /* off 0x664 size 0x4 */
    u32 unk2;

} __attribute__((packed));
_Static_assert(sizeof(StructP) == 0x668, "StructP definition");

/* size 0x24 */
struct StructQ {
    /* off 0x0 size 0x4 */
    u32 h1;

    /* off 0x4 size 0x8 */
    FileBuffer buf;

    /* off 0xC size 0x4 */
    PaletteBlock *plt_ptr;

    /* off 0x10 size 0x14 */
    StructQSub sub;

} __attribute__((packed));
_Static_assert(sizeof(StructQ) == 0x24, "StructQ definition");

/* size 0x74 */
struct StructU {
    /* off 0x0 size 0xC */
    vector_unk4 unk4_list;

    /* off 0xC size 0x4 */
    void **vtable;

    /* off 0x10 size 0x64 */
    u32 us[25];

} __attribute__((packed));
_Static_assert(sizeof(StructU) == 0x74, "StructU definition");

/* size 0x1B4 */
struct AdjectiveHolder {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x1 */
    u8 so1;

    /* off 0x5 size 0x1 */
    u8 so2;

    /* off 0x6 size 0x1 */
    u8 so3;

    /* off 0x7 size 0x1 */
    u8 so4;

    /* off 0x8 size 0x4 */
    Object *obj_ref;

    /* off 0xC size 0x28 */
    Adjective *adjectives[10];

    /* off 0x34 size 0x28 */
    u32 buf2[10];

    /* off 0x5C size 0x140 */
    char adj_name_strs[10][32];

    /* off 0x19C size 0x14 */
    u32 sus2[5];

    /* off 0x1B0 size 0x1 */
    u8 adj_count;

    /* off 0x1B1 size 0x1 */
    u8 su2;

    /* off 0x1B2 size 0x1 */
    u8 su3;

    /* off 0x1B3 size 0x1 */
    u8 su4;

} __attribute__((packed));
_Static_assert(sizeof(AdjectiveHolder) == 0x1B4, "AdjectiveHolder definition");

/* size 0x24 */
struct StructV1 {
    /* off 0x0 size 0x10 */
    StructV2 _v2;

    /* off 0x10 size 0x4 */
    u32 _v15;

    /* off 0x14 size 0x4 */
    u32 _v16;

    /* off 0x18 size 0x4 */
    u32 _v17;

    /* off 0x1C size 0x4 */
    u32 _v18;

    /* off 0x20 size 0x1 */
    u8 v191;

    /* off 0x21 size 0x1 */
    u8 v192;

    /* off 0x22 size 0x1 */
    u8 v193;

    /* off 0x23 size 0x1 */
    u8 v194;

} __attribute__((packed));
_Static_assert(sizeof(StructV1) == 0x24, "StructV1 definition");

/* size 0x38 */
struct StructOA {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0xC */
    vector_Object obj_list;

    /* off 0x10 size 0x4 */
    u32 oa4;

    /* off 0x14 size 0x4 */
    u32 oa5;

    /* off 0x18 size 0x4 */
    u32 oa6;

    /* off 0x1C size 0x2 */
    u16 oa71;

    /* off 0x1E size 0x1 */
    u8 oa721;

    /* off 0x1F size 0x1 */
    u8 oa722;

    /* off 0x20 size 0x1 */
    u8 mask_x;

    /* off 0x21 size 0x1 */
    u8 oa82;

    /* off 0x22 size 0x1 */
    u8 oa83;

    /* off 0x23 size 0x1 */
    u8 oa84;

    /* off 0x24 size 0x4 */
    u32 oa9;

    /* off 0x28 size 0x4 */
    u32 oa10;

    /* off 0x2C size 0x4 */
    Object *obj_ref;

    /* off 0x30 size 0x1 */
    u8 oa121;

    /* off 0x31 size 0x1 */
    u8 oa122;

    /* off 0x32 size 0x1 */
    u8 oa123;

    /* off 0x33 size 0x1 */
    u8 oa124;

    /* off 0x34 size 0x4 */
    u32 oa13;

} __attribute__((packed));
_Static_assert(sizeof(StructOA) == 0x38, "StructOA definition");

/* size 0xBC */
struct StructOI {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x4 */
    Object *obj_ref;

    /* off 0x8 size 0x4 */
    u32 os4x1_obj;

    /* off 0xC size 0xC */
    vector_unk3 list_unk3;

    /* off 0x18 size 0x1 */
    u8 unk_os4x511;

    /* off 0x19 size 0x1 */
    u8 unk_os4x512;

    /* off 0x1A size 0x2 */
    u16 unk_os4x52;

    /* off 0x1C size 0x4 */
    u32 unk_os4x6;

    /* off 0x20 size 0x4 */
    u32 unk_os4x7;

    /* off 0x24 size 0x4 */
    u32 unk_os4x8;

    /* off 0x28 size 0x4 */
    u32 unk_os4x9;

    /* off 0x2C size 0x4 */
    u32 unk_os4x10;

    /* off 0x30 size 0x4 */
    u32 os4x11_some_x;

    /* off 0x34 size 0x4 */
    u32 os4x12_some_y;

    /* off 0x38 size 0x4 */
    u32 unk_os4x13;

    /* off 0x3C size 0x4 */
    u32 unk_os4x14;

    /* off 0x40 size 0x4 */
    u32 unk_os4x15;

    /* off 0x44 size 0x4 */
    u32 unk_os4x16;

    /* off 0x48 size 0x1 */
    u8 os4x171_maybe_jump_requested;

    /* off 0x49 size 0x1 */
    u8 unk_os4x172;

    /* off 0x4A size 0x2 */
    u16 unk_os4x173;

    /* off 0x4C size 0x4 */
    u32 os4x18_obj;

    /* off 0x50 size 0x1 */
    u8 unk_os4x191;

    /* off 0x51 size 0x1 */
    u8 unk_os4x192;

    /* off 0x52 size 0x2 */
    u16 os4x193;

    /* off 0x54 size 0x4 */
    u32 like_file_unk8_6;

    /* off 0x58 size 0x4 */
    u32 like_file_unk8_8;

    /* off 0x5C size 0x4 */
    u32 like_file_unk8_7;

    /* off 0x60 size 0x4 */
    u32 like_file_unk8_6_also;

    /* off 0x64 size 0x4 */
    u32 like_file_unk8_8_also;

    /* off 0x68 size 0x4 */
    u32 like_file_unk8_7_also;

    /* off 0x6C size 0x1 */
    u8 unk_os411112111;

    /* off 0x6D size 0x1 */
    u8 unk_os411112112;

    /* off 0x6E size 0x2 */
    u16 unk_os41111212;

    /* off 0x70 size 0x4 */
    u32 os4111122_mask_a;

    /* off 0x74 size 0x4 */
    u32 os4111123_mask_q;

    /* off 0x78 size 0x1 */
    u8 unk_os4111;

    /* off 0x79 size 0x1 */
    u8 unk_os4112;

    /* off 0x7A size 0x1 */
    u8 unk_os4113;

    /* off 0x7B size 0x1 */
    u8 unk_os4114;

    /* off 0x7C size 0x4 */
    u32 unk_os41w;

    /* off 0x80 size 0x4 */
    u32 os42w_mask_y;

    /* off 0x84 size 0x4 */
    u32 unk_os43w;

    /* off 0x88 size 0x1 */
    u8 os41_mask_x;

    /* off 0x89 size 0x1 */
    u8 jump_strength;

    /* off 0x8A size 0x1 */
    u8 like_jump_strength;

    /* off 0x8B size 0x1 */
    u8 unk_os44;

    /* off 0x8C size 0x1 */
    u8 unk_os4511;

    /* off 0x8D size 0x1 */
    u8 unk_os4512;

    /* off 0x8E size 0x2 */
    u16 unk_os452;

    /* off 0x90 size 0x2 */
    u16 unk_os461;

    /* off 0x92 size 0x2 */
    u16 unk_os462;

    /* off 0x94 size 0x4 */
    u32 unk_os4221;

    /* off 0x98 size 0x4 */
    u32 unk_os4222;

    /* off 0x9C size 0x4 */
    u32 unk_os4223;

    /* off 0xA0 size 0x4 */
    u32 unk_os4224;

    /* off 0xA4 size 0x4 */
    u32 unk_os4225;

    /* off 0xA8 size 0x4 */
    u32 unk_os4226;

    /* off 0xAC size 0x4 */
    StructOSubSubSub *some_subsubsub;

    /* off 0xB0 size 0x1 */
    u8 unk_os412b1;

    /* off 0xB1 size 0x1 */
    u8 unk_os412b2;

    /* off 0xB2 size 0x1 */
    u8 unk_os412b3;

    /* off 0xB3 size 0x1 */
    u8 unk_os412b4_osc10;

    /* off 0xB4 size 0x1 */
    u8 os4121;

    /* off 0xB5 size 0x1 */
    u8 os4122_mask_b;

    /* off 0xB6 size 0x1 */
    u8 os4123_mask_c;

    /* off 0xB7 size 0x1 */
    u8 mask_d;

    /* off 0xB8 size 0x1 */
    u8 unk_os413a1;

    /* off 0xB9 size 0x1 */
    u8 unk_os413a2;

    /* off 0xBA size 0x1 */
    u8 unk_os413a3;

    /* off 0xBB size 0x1 */
    u8 unk_os413a4;

} __attribute__((packed));
_Static_assert(sizeof(StructOI) == 0xBC, "StructOI definition");

/* size 0x38 */
struct StructOJ {
    /* off 0x0 size 0x4 */
    u32 ja1;

    /* off 0x4 size 0xC */
    vector_StructJ5 strj5_list;

    /* off 0x10 size 0x4 */
    StructJ5 *strj5_1;

    /* off 0x14 size 0x4 */
    StructJ5 *strj5_3;

    /* off 0x18 size 0x4 */
    StructJ5 *strj5_2;

    /* off 0x1C size 0x4 */
    StructJ3 *strj3;

    /* off 0x20 size 0x4 */
    void *some_ptrrrr;

    /* off 0x24 size 0x4 */
    u32 jb1;

    /* off 0x28 size 0x4 */
    StructJBase *jobj_1;

    /* off 0x2C size 0x4 */
    u32 jb3;

    /* off 0x30 size 0x4 */
    u32 jb4;

    /* off 0x34 size 0x4 */
    u32 jb5;

} __attribute__((packed));
_Static_assert(sizeof(StructOJ) == 0x38, "StructOJ definition");

/* size 0x2A0 */
struct StructBB {
    /* off 0x0 size 0x7C */
    StructIBase base;

    /* off 0x7C size 0x4 */
    u32 vtable_2;

    /* off 0x80 size 0x4 */
    StructBB1 *strbb1;

    /* off 0x84 size 0x4 */
    u32 bbx2;

    /* off 0x88 size 0xC */
    vector_Object obj_list;

    /* off 0x94 size 0xC */
    vector_unk list_unk;

    /* off 0xA0 size 0xC */
    StructZX strzx;

    /* off 0xAC size 0x14 */
    StructBB2 strbb2;

    /* off 0xC0 size 0x4 */
    u32 bbsw;

    /* off 0xC4 size 0x38 */
    StructBB3 strbb3;

    /* off 0xFC size 0x24 */
    u32 bbs4111[9];

    /* off 0x120 size 0x4 */
    u32 bbbb;

    /* off 0x124 size 0x38 */
    u32 bbs412[14];

    /* off 0x15C size 0x1 */
    u8 bbs11;

    /* off 0x15D size 0x1 */
    u8 bbs12;

    /* off 0x15E size 0x2 */
    u16 bbs2;

    /* off 0x160 size 0xB0 */
    u32 bbs413[44];

    /* off 0x210 size 0x4 */
    u32 bc;

    /* off 0x214 size 0x8C */
    u32 bbs42[35];

} __attribute__((packed));
_Static_assert(sizeof(StructBB) == 0x2A0, "StructBB definition");

/* size 0x50 */
struct StructESub {
    /* off 0x0 size 0x28 */
    StructESub1 in1;

    /* off 0x28 size 0x28 */
    StructESub1 in2;

} __attribute__((packed));
_Static_assert(sizeof(StructESub) == 0x50, "StructESub definition");

/* size 0x48 */
struct StructJBaseBase {
    /* off 0x0 size 0x20 */
    StructJBaseBaseBase base;

    /* off 0x20 size 0x4 */
    StructJSub *jsub;

    /* off 0x24 size 0x4 */
    u32 j2;

    /* off 0x28 size 0x4 */
    u32 j3;

    /* off 0x2C size 0x4 */
    u32 j4;

    /* off 0x30 size 0x4 */
    u32 j5;

    /* off 0x34 size 0x4 */
    u32 j6;

    /* off 0x38 size 0x4 */
    u32 j7;

    /* off 0x3C size 0x4 */
    u32 j8;

    /* off 0x40 size 0x4 */
    u32 j9;

    /* off 0x44 size 0x4 */
    u32 j10;

} __attribute__((packed));
_Static_assert(sizeof(StructJBaseBase) == 0x48, "StructJBaseBase definition");

/* size 0x1C */
struct StructJSub {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x4 */
    u32 _s1;

    /* off 0x8 size 0x4 */
    u32 _s2;

    /* off 0xC size 0x4 */
    u32 _s3;

    /* off 0x10 size 0x8 */
    Vec2 _v2;

    /* off 0x18 size 0x4 */
    u32 _s6;

} __attribute__((packed));
_Static_assert(sizeof(StructJSub) == 0x1C, "StructJSub definition");

/* size 0x44 */
struct StructDJ {
    /* off 0x0 size 0x24 */
    StructDJSub sub;

    /* off 0x24 size 0x1 */
    u8 dh11;

    /* off 0x25 size 0x1 */
    u8 dh12;

    /* off 0x26 size 0x1 */
    u8 dh13;

    /* off 0x27 size 0x1 */
    u8 dh14;

    /* off 0x28 size 0x4 */
    u32 dh2;

    /* off 0x2C size 0x4 */
    u32 dh3;

    /* off 0x30 size 0x4 */
    u32 dh4;

    /* off 0x34 size 0x4 */
    u32 dh5;

    /* off 0x38 size 0x4 */
    u32 dh6;

    /* off 0x3C size 0x4 */
    u32 dh7;

    /* off 0x40 size 0x4 */
    u32 dh8;

} __attribute__((packed));
_Static_assert(sizeof(StructDJ) == 0x44, "StructDJ definition");

/* size 0xA0 */
struct StructC {
    /* off 0x0 size 0x4 */
    u32 unk0_val1;

    /* off 0x4 size 0x4 */
    u32 *file_offset_list;

    /* off 0x8 size 0x48 */
    Fs_File file_1i;

    /* off 0x50 size 0x48 */
    Fs_File file_1p;

    /* off 0x98 size 0x4 */
    void *file_data_ptr;

    /* off 0x9C size 0x4 */
    u32 file_count;

} __attribute__((packed));
_Static_assert(sizeof(StructC) == 0xA0, "StructC definition");

/* size 0x38 */
struct Mem_HeapHead {
    /* off 0x0 size 0x4 */
    u32 magic;

    /* off 0x4 size 0x4 */
    Mem_HeapHead *some_head;

    /* off 0x8 size 0x4 */
    void *some_tail;

    /* off 0xC size 0xC */
    NNSFndList child_heap_head_list;

    /* off 0x18 size 0x8 */
    Mem_MemoryRegion3 heap_region;

    /* off 0x20 size 0x4 */
    u32 option;

    /* off 0x24 size 0x14 */
    Mem_CommonHeapHead common;

} __attribute__((packed));
_Static_assert(sizeof(Mem_HeapHead) == 0x38, "Mem_HeapHead definition");

/* size 0x7C */
struct StructE {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x4 */
    u32 e1;

    /* off 0x8 size 0x2 */
    u16 e2;

    /* off 0xA size 0x50 */
    StructESub sub;

    /* off 0x5A size 0x1 */
    u8 enabled;

    /* off 0x5B size 0x1 */
    u8 e4;

    /* off 0x5C size 0x2 */
    u16 keys_down;

    /* off 0x5E size 0x2 */
    u16 keys_held;

    /* off 0x60 size 0x4 */
    u32 e7;

    /* off 0x64 size 0x2 */
    u16 touch_x_alive;

    /* off 0x66 size 0x2 */
    u16 touch_y_alive;

    /* off 0x68 size 0x2 */
    u16 touch_x;

    /* off 0x6A size 0x2 */
    u16 touch_y;

    /* off 0x6C size 0x2 */
    u16 touch_pressed;

    /* off 0x6E size 0x2 */
    u16 e14;

    /* off 0x70 size 0x2 */
    u16 touch_x_prev;

    /* off 0x72 size 0x2 */
    u16 touch_y_prev;

    /* off 0x74 size 0x2 */
    u16 touch_pressed_prev;

    /* off 0x76 size 0x2 */
    u16 like_e14;

    /* off 0x78 size 0x1 */
    u8 e191;

    /* off 0x79 size 0x1 */
    u8 e192;

    /* off 0x7A size 0x2 */
    u16 e20;

} __attribute__((packed));
_Static_assert(sizeof(StructE) == 0x7C, "StructE definition");

/* size 0x958 */
struct Object {
    /* off 0x0 size 0x4 */
    void **vtable;

    /* off 0x4 size 0x4 */
    StructX *strx;

    /* off 0x8 size 0x4 */
    u32 o2_obj;

    /* off 0xC size 0x4 */
    StructOOO *strooo;

    /* off 0x10 size 0x4 */
    u32 os3111;

    /* off 0x14 size 0x38 */
    StructOA stroa;

    /* off 0x4C size 0x8 */
    StructOB strob;

    /* off 0x54 size 0x44 */
    StructOC stroc;

    /* off 0x98 size 0x14 */
    StructOD strod;

    /* off 0xAC size 0x14 */
    StructOE stroe;

    /* off 0xC0 size 0x10 */
    StructOF strof;

    /* off 0xD0 size 0x180 */
    StructOG strog;

    /* off 0x250 size 0x24 */
    StructOH stroh;

    /* off 0x274 size 0x1B4 */
    AdjectiveHolder adj_holder;

    /* off 0x428 size 0xBC */
    StructOI stroi;

    /* off 0x4E4 size 0x38 */
    StructOJ stroj;

    /* off 0x51C size 0x4 */
    u32 os555_some_ptr;

    /* off 0x520 size 0x2 */
    u16 file_unk16_1;

    /* off 0x522 size 0x2 */
    u16 file_unk16_2;

    /* off 0x524 size 0x2 */
    u16 file_unk16_3;

    /* off 0x526 size 0x2 */
    u16 obj_match_id;

    /* off 0x528 size 0x2 */
    u16 osxyz1;

    /* off 0x52A size 0x2 */
    u16 osxyz2;

    /* off 0x52C size 0x4 */
    u32 obj_file_id;

    /* off 0x530 size 0x4 */
    u32 some_obj_file_id2;

    /* off 0x534 size 0x2 */
    u16 osx11112a;

    /* off 0x536 size 0x2 */
    u16 osx11112b;

    /* off 0x538 size 0x4 */
    u32 osx11113;

    /* off 0x53C size 0x2 */
    u16 file_unk16_4_maybe_sprite_dim;

    /* off 0x53E size 0x2 */
    u16 file_unk16_5_maybe_sprite_dim;

    /* off 0x540 size 0x2 */
    u16 like_unk16_4;

    /* off 0x542 size 0x2 */
    u16 like_unk16_5;

    /* off 0x544 size 0x4 */
    u32 osx11122;

    /* off 0x548 size 0x4 */
    u32 osx11123;

    /* off 0x54C size 0x4 */
    u32 another_ptr_slot_idx;

    /* off 0x550 size 0xC */
    vector_Object ojsub;

    /* off 0x55C size 0x4 */
    u32 some_ptr_slot_idx;

    /* off 0x560 size 0x4 */
    u32 osx12a1;

    /* off 0x564 size 0x4 */
    u32 osx12a2;

    /* off 0x568 size 0x2 */
    u16 osx12a31;

    /* off 0x56A size 0x2 */
    u16 osx12a32;

    /* off 0x56C size 0x4 */
    u32 osx12a4;

    /* off 0x570 size 0x4 */
    u32 osx12a5_obj;

    /* off 0x574 size 0x4 */
    u32 osx12a6;

    /* off 0x578 size 0x4 */
    u32 osx12a7;

    /* off 0x57C size 0x4 */
    u32 osx12a8;

    /* off 0x580 size 0x4 */
    u32 osx12a9;

    /* off 0x584 size 0x4 */
    u32 osx12a10;

    /* off 0x588 size 0x1 */
    u8 osxx1;

    /* off 0x589 size 0x1 */
    u8 osxx2;

    /* off 0x58A size 0x1 */
    u8 osxx3;

    /* off 0x58B size 0x1 */
    u8 osxx4;

    /* off 0x58C size 0x18 */
    u32 osx2a[6];

    /* off 0x5A4 size 0x18 */
    u32 osx2b[6];

    /* off 0x5BC size 0x50 */
    u32 osxyzqrt1[20];

    /* off 0x60C size 0x1 */
    u8 osxs1;

    /* off 0x60D size 0x1 */
    u8 osxs2;

    /* off 0x60E size 0x1 */
    u8 osxs3;

    /* off 0x60F size 0x1 */
    u8 osxs4;

    /* off 0x610 size 0x2 */
    u16 osxa1;

    /* off 0x612 size 0x2 */
    u16 osxa2;

    /* off 0x614 size 0x1 */
    u8 osys1;

    /* off 0x615 size 0x1 */
    u8 osys2;

    /* off 0x616 size 0x1 */
    u8 osys3;

    /* off 0x617 size 0x1 */
    u8 osys4;

    /* off 0x618 size 0x4 */
    u32 osys5;

    /* off 0x61C size 0x1 */
    u8 osys6;

    /* off 0x61D size 0x1 */
    u8 throws_flames;

    /* off 0x61E size 0x1 */
    u8 osys8;

    /* off 0x61F size 0x1 */
    u8 osys9;

    /* off 0x620 size 0x4 */
    u32 osyz5;

    /* off 0x624 size 0x4 */
    u32 osyz6;

    /* off 0x628 size 0x4 */
    u32 osyz7;

    /* off 0x62C size 0x4 */
    u32 osyz8;

    /* off 0x630 size 0x4 */
    u32 osyz9;

    /* off 0x634 size 0x4 */
    u32 osyz10;

    /* off 0x638 size 0x4 */
    u32 osyz11;

    /* off 0x63C size 0x4 */
    u32 osyz12;

    /* off 0x640 size 0x4 */
    u32 osyz13;

    /* off 0x644 size 0x4 */
    u32 osyz14;

    /* off 0x648 size 0x4 */
    StructAA *straa;

    /* off 0x64C size 0x4 */
    u32 osyz16;

    /* off 0x650 size 0x4 */
    u32 osyz17;

    /* off 0x654 size 0x4 */
    StructOU *strou;

    /* off 0x658 size 0x1 */
    u8 osyz19;

    /* off 0x659 size 0x1 */
    u8 osyz20;

    /* off 0x65A size 0xB4 */
    StructY y_arr[18];

    /* off 0x70E size 0xDA */
    u8 osxyzqrt3[218];

    /* off 0x7E8 size 0x1 */
    u8 osxyzqrt41;

    /* off 0x7E9 size 0x1 */
    u8 osxyzqrt42;

    /* off 0x7EA size 0x1 */
    u8 osxyzqrt43;

    /* off 0x7EB size 0x1 */
    u8 osxyzqrt44;

    /* off 0x7EC size 0x2 */
    u16 osxyzqrt45;

    /* off 0x7EE size 0x2 */
    u16 osxyzqrt46;

    /* off 0x7F0 size 0x2 */
    u16 osxyzqrt47;

    /* off 0x7F2 size 0x2 */
    u16 osxyzqrt48;

    /* off 0x7F4 size 0x2 */
    u16 osxyzqrt49;

    /* off 0x7F6 size 0x2 */
    u16 osxyzqrt50;

    /* off 0x7F8 size 0x1 */
    u8 osxyzqrt51_some_flag;

    /* off 0x7F9 size 0x1 */
    u8 osxyzqrt52;

    /* off 0x7FA size 0x1 */
    u8 osxyzqrt53;

    /* off 0x7FB size 0x1 */
    u8 osxyzqrt54;

    /* off 0x7FC size 0x2 */
    u16 osxyzqrt55;

    /* off 0x7FE size 0x2 */
    u8 osxyzqrt4[2];

    /* off 0x800 size 0x1 */
    u8 unk;

    /* off 0x801 size 0x40 */
    char obj_name_str[64];

    /* off 0x841 size 0x100 */
    char obj_description_str[256];

    /* off 0x941 size 0x3 */
    u8 oss[3];

    /* off 0x944 size 0x4 */
    u32 osy1;

    /* off 0x948 size 0x4 */
    u32 osy2;

    /* off 0x94C size 0x4 */
    u32 osy3;

    /* off 0x950 size 0x4 */
    u32 osy4;

    /* off 0x954 size 0x1 */
    u8 osy5;

    /* off 0x955 size 0x1 */
    u8 osy6;

    /* off 0x956 size 0x1 */
    u8 osy7;

    /* off 0x957 size 0x1 */
    u8 osy8;

} __attribute__((packed));
_Static_assert(sizeof(Object) == 0x958, "Object definition");

/* size 0x4C */
struct StructJBase {
    /* off 0x0 size 0x48 */
    StructJBaseBase base;

    /* off 0x48 size 0x1 */
    u8 jx1;

    /* off 0x49 size 0x1 */
    u8 jx2;

    /* off 0x4A size 0x1 */
    u8 type;

    /* off 0x4B size 0x1 */
    u8 jx4;

} __attribute__((packed));
_Static_assert(sizeof(StructJBase) == 0x4C, "StructJBase definition");

/* size 0x64 */
struct StructJ3 {
    /* off 0x0 size 0x4C */
    StructJBase base;

    /* off 0x4C size 0x4 */
    u32 g1;

    /* off 0x50 size 0x4 */
    u32 g2;

    /* off 0x54 size 0x4 */
    u32 g3;

    /* off 0x58 size 0x4 */
    u32 g4;

    /* off 0x5C size 0x4 */
    u32 g5;

    /* off 0x60 size 0x1 */
    u8 g61;

    /* off 0x61 size 0x1 */
    u8 g62;

    /* off 0x62 size 0x1 */
    u8 g63;

    /* off 0x63 size 0x1 */
    u8 g64;

} __attribute__((packed));
_Static_assert(sizeof(StructJ3) == 0x64, "StructJ3 definition");

/* size 0x74 */
struct StructJ5 {
    /* off 0x0 size 0x4C */
    StructJBase base;

    /* off 0x4C size 0x4 */
    u32 j1;

    /* off 0x50 size 0x4 */
    u32 j2;

    /* off 0x54 size 0x1 */
    u8 j31;

    /* off 0x55 size 0x1 */
    u8 j32;

    /* off 0x56 size 0x1 */
    u8 j33;

    /* off 0x57 size 0x1 */
    u8 j34;

    /* off 0x58 size 0x4 */
    u32 j4;

    /* off 0x5C size 0x4 */
    u32 j5;

    /* off 0x60 size 0x4 */
    u32 j6;

    /* off 0x64 size 0x4 */
    u32 j7;

    /* off 0x68 size 0x4 */
    u32 j8;

    /* off 0x6C size 0x4 */
    u32 j9;

    /* off 0x70 size 0x1 */
    u8 j101;

    /* off 0x71 size 0x1 */
    u8 j102;

    /* off 0x72 size 0x1 */
    u8 j103;

    /* off 0x73 size 0x1 */
    u8 j104;

} __attribute__((packed));
_Static_assert(sizeof(StructJ5) == 0x74, "StructJ5 definition");

/* size 0x70 */
struct StructJ2 {
    /* off 0x0 size 0x4C */
    StructJBase base;

    /* off 0x4C size 0x1 */
    u8 j11;

    /* off 0x4D size 0x1 */
    u8 j12;

    /* off 0x4E size 0x1 */
    u8 j13;

    /* off 0x4F size 0x1 */
    u8 j14;

    /* off 0x50 size 0x4 */
    u32 j2;

    /* off 0x54 size 0x4 */
    u32 j3;

    /* off 0x58 size 0x4 */
    u32 j4;

    /* off 0x5C size 0x4 */
    u32 j5;

    /* off 0x60 size 0x1 */
    u8 j61;

    /* off 0x61 size 0x1 */
    u8 j62;

    /* off 0x62 size 0x1 */
    u8 j63;

    /* off 0x63 size 0x1 */
    u8 j64;

    /* off 0x64 size 0x4 */
    u32 j7;

    /* off 0x68 size 0x4 */
    u32 j8;

    /* off 0x6C size 0x1 */
    u8 j91;

    /* off 0x6D size 0x1 */
    u8 j92;

    /* off 0x6E size 0x1 */
    u8 j93;

    /* off 0x6F size 0x1 */
    u8 j94;

} __attribute__((packed));
_Static_assert(sizeof(StructJ2) == 0x70, "StructJ2 definition");

#endif // {MACRO_START}_TYPES_GEN_H
